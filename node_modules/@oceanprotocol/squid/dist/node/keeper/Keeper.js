"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var DIDRegistry_1 = __importDefault(require("./contracts/DIDRegistry"));
var Dispenser_1 = __importDefault(require("./contracts/Dispenser"));
var Token_1 = __importDefault(require("./contracts/Token"));
var conditions_1 = require("./contracts/conditions");
var templates_1 = require("./contracts/templates");
var managers_1 = require("./contracts/managers");
var utils_1 = require("../utils");
var EventHandler_1 = require("./EventHandler");
var Instantiable_abstract_1 = require("../Instantiable.abstract");
var Keeper = (function (_super) {
    __extends(Keeper, _super);
    function Keeper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.connected = false;
        return _this;
    }
    Keeper.getInstance = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var keeper, _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        keeper = new Keeper();
                        keeper.setInstanceConfig(config);
                        config.ocean.keeper = keeper;
                        keeper.instances = {};
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 3, , 4]);
                        _a = keeper;
                        return [4, utils_1.objectPromiseAll({
                                dispenser: undefined,
                                token: Token_1.default.getInstance(config),
                                didRegistry: DIDRegistry_1.default.getInstance(config),
                                templateStoreManager: managers_1.TemplateStoreManager.getInstance(config),
                                agreementStoreManager: managers_1.AgreementStoreManager.getInstance(config),
                                conditionStoreManager: managers_1.ConditionStoreManager.getInstance(config),
                                lockRewardCondition: conditions_1.LockRewardCondition.getInstance(config),
                                escrowReward: conditions_1.EscrowReward.getInstance(config),
                                accessSecretStoreCondition: conditions_1.AccessSecretStoreCondition.getInstance(config),
                                computeExecutionCondition: conditions_1.ComputeExecutionCondition.getInstance(config),
                                escrowAccessSecretStoreTemplate: templates_1.EscrowAccessSecretStoreTemplate.getInstance(config),
                                escrowComputeExecutionTemplate: templates_1.EscrowComputeExecutionTemplate.getInstance(config)
                            })];
                    case 2:
                        _a.instances = _e.sent();
                        keeper.connected = true;
                        return [3, 4];
                    case 3:
                        _b = _e.sent();
                        keeper.connected = false;
                        return [2];
                    case 4:
                        _e.trys.push([4, 6, , 7]);
                        _c = keeper.instances;
                        return [4, Dispenser_1.default.getInstance(config)];
                    case 5:
                        _c.dispenser = _e.sent();
                        return [3, 7];
                    case 6:
                        _d = _e.sent();
                        keeper.logger.warn('Dispenser not available on this network.');
                        return [3, 7];
                    case 7:
                        keeper.dispenser = keeper.instances.dispenser;
                        keeper.token = keeper.instances.token;
                        keeper.didRegistry = keeper.instances.didRegistry;
                        keeper.templateStoreManager = keeper.instances.templateStoreManager;
                        keeper.agreementStoreManager = keeper.instances.agreementStoreManager;
                        keeper.conditionStoreManager = keeper.instances.conditionStoreManager;
                        keeper.conditions = {
                            lockRewardCondition: keeper.instances.lockRewardCondition,
                            escrowReward: keeper.instances.escrowReward,
                            accessSecretStoreCondition: keeper.instances.accessSecretStoreCondition,
                            computeExecutionCondition: keeper.instances.computeExecutionCondition
                        };
                        keeper.templates = {
                            escrowAccessSecretStoreTemplate: keeper.instances.escrowAccessSecretStoreTemplate,
                            escrowComputeExecutionTemplate: keeper.instances.escrowComputeExecutionTemplate
                        };
                        keeper.utils = {
                            eventHandler: new EventHandler_1.EventHandler(config)
                        };
                        return [2, keeper];
                }
            });
        });
    };
    Keeper.prototype.getConditionByAddress = function (address) {
        return Object.values(this.conditions).find(function (condition) { return condition.getAddress() === address; });
    };
    Keeper.prototype.getTemplateByName = function (name) {
        return Object.values(this.templates).find(function (template) { return template.contractName === name; });
    };
    Keeper.prototype.getTemplateByAddress = function (address) {
        return Object.values(this.templates).find(function (template) { return template.getAddress() === address; });
    };
    Keeper.prototype.getNetworkId = function () {
        return this.web3.eth.net.getId();
    };
    Keeper.prototype.getNetworkName = function () {
        return this.web3.eth.net.getId().then(function (networkId) {
            switch (networkId) {
                case 1:
                    return 'Main';
                case 2:
                    return 'Morden';
                case 3:
                    return 'Ropsten';
                case 4:
                    return 'Rinkeby';
                case 77:
                    return 'POA_Sokol';
                case 99:
                    return 'POA_Core';
                case 42:
                    return 'Kovan';
                case 100:
                    return 'xDai';
                case 2199:
                    return 'Duero';
                case 8996:
                    return 'Spree';
                case 8995:
                    return 'Nile';
                case 0xcea11:
                    return 'Pacific';
                default:
                    return 'Development';
            }
        });
    };
    Keeper.prototype.getAllInstances = function () {
        return this.instances;
    };
    return Keeper;
}(Instantiable_abstract_1.Instantiable));
exports.Keeper = Keeper;
exports.default = Keeper;
//# sourceMappingURL=Keeper.js.map