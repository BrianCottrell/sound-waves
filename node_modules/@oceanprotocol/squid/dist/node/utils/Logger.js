"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["None"] = -1] = "None";
    LogLevel[LogLevel["Error"] = 0] = "Error";
    LogLevel[LogLevel["Warn"] = 1] = "Warn";
    LogLevel[LogLevel["Log"] = 2] = "Log";
    LogLevel[LogLevel["Verbose"] = 3] = "Verbose";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
var Logger = (function () {
    function Logger(logLevel) {
        if (logLevel === void 0) { logLevel = LogLevel.Verbose; }
        this.logLevel = logLevel;
    }
    Logger.prototype.setLevel = function (logLevel) {
        this.logLevel = logLevel;
    };
    Logger.prototype.bypass = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.dispatch.apply(this, __spreadArrays(['log', -Infinity], args));
    };
    Logger.prototype.debug = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.dispatch.apply(this, __spreadArrays(['debug', LogLevel.Verbose], args));
    };
    Logger.prototype.log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.dispatch.apply(this, __spreadArrays(['log', LogLevel.Log], args));
    };
    Logger.prototype.warn = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.dispatch.apply(this, __spreadArrays(['warn', LogLevel.Warn], args));
    };
    Logger.prototype.error = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        this.dispatch.apply(this, __spreadArrays(['error', LogLevel.Error], args));
    };
    Logger.prototype.dispatch = function (verb, level) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (this.logLevel >= level) {
            console[verb].apply(console, args);
        }
    };
    return Logger;
}());
exports.Logger = Logger;
exports.LoggerInstance = new Logger();
exports.default = exports.LoggerInstance;
//# sourceMappingURL=Logger.js.map