"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var keeperPackageJson = __importStar(require("@oceanprotocol/keeper-contracts/package.json"));
var metadata = __importStar(require("../metadata.json"));
var Instantiable_abstract_1 = require("../Instantiable.abstract");
var OceanPlatformTechStatus;
(function (OceanPlatformTechStatus) {
    OceanPlatformTechStatus["Loading"] = "Loading";
    OceanPlatformTechStatus["Unknown"] = "Unknown";
    OceanPlatformTechStatus["Stopped"] = "Stopped";
    OceanPlatformTechStatus["Working"] = "Working";
})(OceanPlatformTechStatus = exports.OceanPlatformTechStatus || (exports.OceanPlatformTechStatus = {}));
var OceanVersions = (function (_super) {
    __extends(OceanVersions, _super);
    function OceanVersions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OceanVersions.getInstance = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var instance;
            return __generator(this, function (_a) {
                instance = new OceanVersions();
                instance.setInstanceConfig(config);
                return [2, instance];
            });
        });
    };
    OceanVersions.prototype.get = function () {
        return __awaiter(this, void 0, void 0, function () {
            var versions, _a, _b, _c, _d, _e, contracts, keeperVersion, network, name_1, version, _f, _g, name_2, version, _h, techs, networks, contractStatus, contractList;
            var _this = this;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        versions = {};
                        _a = versions;
                        _b = {
                            name: 'Squid-js',
                            version: metadata.version,
                            commit: metadata.commit,
                            status: OceanPlatformTechStatus.Working
                        };
                        return [4, this.ocean.keeper.getNetworkName()];
                    case 1:
                        _b.network = (_j.sent()).toLowerCase(),
                            _b.keeperVersion = keeperPackageJson.version;
                        _d = (_c = Object).values;
                        return [4, this.ocean.keeper.getAllInstances()];
                    case 2:
                        _a.squid = (_b.contracts = _d.apply(_c, [_j.sent()])
                            .filter(function (_) { return !!_; })
                            .reduce(function (acc, _a) {
                            var _b;
                            var contractName = _a.contractName, address = _a.address;
                            return (__assign(__assign({}, acc), (_b = {}, _b[contractName] = address, _b)));
                        }, {}),
                            _b);
                        _j.label = 3;
                    case 3:
                        _j.trys.push([3, 5, , 6]);
                        return [4, this.ocean.brizo.getVersionInfo()];
                    case 4:
                        _e = _j.sent(), contracts = _e.contracts, keeperVersion = _e["keeper-version"], network = _e.network, name_1 = _e.software, version = _e.version;
                        versions.brizo = {
                            name: name_1,
                            status: OceanPlatformTechStatus.Working,
                            version: version,
                            contracts: contracts,
                            network: network,
                            keeperVersion: keeperVersion.replace(/^v/, '')
                        };
                        return [3, 6];
                    case 5:
                        _f = _j.sent();
                        versions.brizo = {
                            name: 'Brizo',
                            status: OceanPlatformTechStatus.Stopped
                        };
                        return [3, 6];
                    case 6:
                        _j.trys.push([6, 8, , 9]);
                        return [4, this.ocean.aquarius.getVersionInfo()];
                    case 7:
                        _g = _j.sent(), name_2 = _g.software, version = _g.version;
                        versions.aquarius = {
                            name: name_2,
                            status: OceanPlatformTechStatus.Working,
                            version: version
                        };
                        return [3, 9];
                    case 8:
                        _h = _j.sent();
                        versions.aquarius = {
                            name: 'Aquarius',
                            status: OceanPlatformTechStatus.Stopped
                        };
                        return [3, 9];
                    case 9:
                        techs = Object.values(versions);
                        networks = techs
                            .map(function (_a) {
                            var network = _a.network;
                            return network;
                        })
                            .filter(function (_) { return !!_; })
                            .reduce(function (acc, network) {
                            var _a;
                            return (__assign(__assign({}, acc), (_a = {}, _a[network] = true, _a)));
                        }, {});
                        contractStatus = true;
                        contractList = techs.map(function (_a) {
                            var contracts = _a.contracts;
                            return contracts;
                        }).filter(function (_) { return !!_; });
                        Array.from(contractList.map(Object.keys))
                            .reduce(function (acc, _) { return __spreadArrays(acc, _); }, [])
                            .filter(function (_, i, list) { return list.indexOf(_) === i; })
                            .forEach(function (name) {
                            var address;
                            contractList
                                .map(function (_) { return _[name]; })
                                .forEach(function (_) {
                                if (!address) {
                                    address = _;
                                    return;
                                }
                                if (address !== _) {
                                    _this.logger.warn("Error on contract " + name);
                                    contractStatus = false;
                                }
                            });
                        });
                        versions.status = {
                            ok: !techs.find(function (_a) {
                                var status = _a.status;
                                return status !== OceanPlatformTechStatus.Working;
                            }),
                            network: Object.keys(networks).length === 1,
                            contracts: contractStatus
                        };
                        return [2, versions];
                }
            });
        });
    };
    return OceanVersions;
}(Instantiable_abstract_1.Instantiable));
exports.OceanVersions = OceanVersions;
//# sourceMappingURL=OceanVersions.js.map