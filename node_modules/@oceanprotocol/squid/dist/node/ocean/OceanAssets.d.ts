import { TransactionReceipt } from 'web3-core';
import { SearchQuery } from '../aquarius/Aquarius';
import { DDO } from '../ddo/DDO';
import { MetaData } from '../ddo/MetaData';
import { Service } from '../ddo/Service';
import Account from './Account';
import { SubscribablePromise } from '../utils';
import { Instantiable, InstantiableConfig } from '../Instantiable.abstract';
export declare enum CreateProgressStep {
    EncryptingFiles = 0,
    FilesEncrypted = 1,
    GeneratingProof = 2,
    ProofGenerated = 3,
    RegisteringDid = 4,
    DidRegistred = 5,
    StoringDdo = 6,
    DdoStored = 7
}
export declare enum OrderProgressStep {
    CreatingAgreement = 0,
    AgreementInitialized = 1,
    LockingPayment = 2,
    LockedPayment = 3
}
export declare class OceanAssets extends Instantiable {
    static getInstance(config: InstantiableConfig): Promise<OceanAssets>;
    resolve(did: string): Promise<DDO>;
    create(metadata: MetaData, publisher: Account, services?: Service[]): SubscribablePromise<CreateProgressStep, DDO>;
    consume(agreementId: string, did: string, serviceIndex: number, consumerAccount: Account, resultPath: string, index?: number, useSecretStore?: boolean): Promise<string>;
    consume(agreementId: string, did: string, serviceIndex: number, consumerAccount: Account, resultPath?: undefined | null, index?: number, useSecretStore?: boolean): Promise<true>;
    order(did: string, index: number, consumer: Account): SubscribablePromise<OrderProgressStep, string>;
    owner(did: string): Promise<string>;
    ownerAssets(owner: string): Promise<string[]>;
    transferOwnership(did: string, newOwner: string): Promise<TransactionReceipt>;
    consumerAssets(consumer: string): Promise<string[]>;
    query(query: SearchQuery): Promise<import("../aquarius/Aquarius").QueryResult>;
    search(text: string): Promise<import("../aquarius/Aquarius").QueryResult>;
}
