import Account from './Account';
import { Instantiable, InstantiableConfig } from '../Instantiable.abstract';
import { AgreementConditionsStatus } from '../keeper/contracts/templates/AgreementTemplate.abstract';
import { ConditionState } from '../keeper/contracts/conditions/Condition.abstract';
import { OceanAgreementsConditions } from './OceanAgreementsConditions';
export interface AgreementPrepareResult {
    agreementId: string;
    signature: string;
}
export declare class OceanAgreements extends Instantiable {
    static getInstance(config: InstantiableConfig): Promise<OceanAgreements>;
    conditions: OceanAgreementsConditions;
    prepare(did: string, index: number, consumer: Account): Promise<AgreementPrepareResult>;
    send(did: string, agreementId: string, index: number, signature: string, consumer: Account): Promise<void>;
    create(did: string, agreementId: string, index: number, signature: string, consumer: Account, publisher: Account): Promise<boolean>;
    status(agreementId: string, extended?: false): Promise<{
        [condition: string]: ConditionState;
    }>;
    status(agreementId: string, extended: true): Promise<AgreementConditionsStatus>;
}
