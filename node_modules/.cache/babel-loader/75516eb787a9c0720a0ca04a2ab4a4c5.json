{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { Ocean, Logger } from '@oceanprotocol/squid';\nimport { aquariusUri, brizoUri, brizoAddress, faucetUri, nodeUri, secretStoreUri, verbose } from './config';\nexport function provideOcean(_x) {\n  return _provideOcean.apply(this, arguments);\n} //\n// Faucet\n//\n\nfunction _provideOcean() {\n  _provideOcean = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(web3Provider) {\n    var config, ocean;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            config = {\n              web3Provider: web3Provider,\n              nodeUri: nodeUri,\n              aquariusUri: aquariusUri,\n              brizoUri: brizoUri,\n              brizoAddress: brizoAddress,\n              secretStoreUri: secretStoreUri,\n              verbose: verbose\n            };\n            _context.next = 3;\n            return Ocean.getInstance(config);\n\n          case 3:\n            ocean = _context.sent;\n            return _context.abrupt(\"return\", {\n              ocean: ocean\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _provideOcean.apply(this, arguments);\n}\n\nexport function requestFromFaucet(_x2) {\n  return _requestFromFaucet.apply(this, arguments);\n}\n\nfunction _requestFromFaucet() {\n  _requestFromFaucet = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(account) {\n    var url, response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            url = \"\".concat(faucetUri, \"/faucet\");\n            _context2.next = 4;\n            return fetch(url, {\n              method: 'POST',\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                address: account,\n                agent: 'commons'\n              })\n            });\n\n          case 4:\n            response = _context2.sent;\n            return _context2.abrupt(\"return\", response.json());\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            Logger.error('requestFromFaucet', _context2.t0.message);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 8]]);\n  }));\n  return _requestFromFaucet.apply(this, arguments);\n}","map":{"version":3,"sources":["C:/Users/Brian/Projects/SoundWaves/sound-waves/client/src/ocean.ts"],"names":["Ocean","Logger","aquariusUri","brizoUri","brizoAddress","faucetUri","nodeUri","secretStoreUri","verbose","provideOcean","web3Provider","config","getInstance","ocean","requestFromFaucet","account","url","fetch","method","headers","Accept","body","JSON","stringify","address","agent","response","json","error","message"],"mappings":";;AAAA,SAASA,KAAT,EAAgBC,MAAhB,QAA8B,sBAA9B;AAGA,SACIC,WADJ,EAEIC,QAFJ,EAGIC,YAHJ,EAIIC,SAJJ,EAKIC,OALJ,EAMIC,cANJ,EAOIC,OAPJ,QAQO,UARP;AAUA,gBAAsBC,YAAtB;AAAA;AAAA,C,CAcA;AACA;AACA;;;;;2BAhBO,iBAA4BC,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,YAAAA,MADH,GACY;AACXD,cAAAA,YAAY,EAAZA,YADW;AAEXJ,cAAAA,OAAO,EAAPA,OAFW;AAGXJ,cAAAA,WAAW,EAAXA,WAHW;AAIXC,cAAAA,QAAQ,EAARA,QAJW;AAKXC,cAAAA,YAAY,EAAZA,YALW;AAMXG,cAAAA,cAAc,EAAdA,cANW;AAOXC,cAAAA,OAAO,EAAPA;AAPW,aADZ;AAAA;AAAA,mBAUsBR,KAAK,CAACY,WAAN,CAAkBD,MAAlB,CAVtB;;AAAA;AAUGE,YAAAA,KAVH;AAAA,6CAWI;AAAEA,cAAAA,KAAK,EAALA;AAAF,aAXJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAuBP,gBAAsBC,iBAAtB;AAAA;AAAA;;;;;2BAAO,kBAAiCC,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEOC,YAAAA,GAFP,aAEgBX,SAFhB;AAAA;AAAA,mBAGwBY,KAAK,CAACD,GAAD,EAAM;AAC9BE,cAAAA,MAAM,EAAE,MADsB;AAE9BC,cAAAA,OAAO,EAAE;AACLC,gBAAAA,MAAM,EAAE,kBADH;AAEL,gCAAgB;AAFX,eAFqB;AAM9BC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,gBAAAA,OAAO,EAAET,OADQ;AAEjBU,gBAAAA,KAAK,EAAE;AAFU,eAAf;AANwB,aAAN,CAH7B;;AAAA;AAGOC,YAAAA,QAHP;AAAA,8CAcQA,QAAQ,CAACC,IAAT,EAdR;;AAAA;AAAA;AAAA;AAgBC1B,YAAAA,MAAM,CAAC2B,KAAP,CAAa,mBAAb,EAAkC,aAAMC,OAAxC;;AAhBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { Ocean, Logger } from '@oceanprotocol/squid'\r\nimport Web3 from 'web3'\r\n\r\nimport {\r\n    aquariusUri,\r\n    brizoUri,\r\n    brizoAddress,\r\n    faucetUri,\r\n    nodeUri,\r\n    secretStoreUri,\r\n    verbose\r\n} from './config'\r\n\r\nexport async function provideOcean(web3Provider: Web3) {\r\n    const config = {\r\n        web3Provider,\r\n        nodeUri,\r\n        aquariusUri,\r\n        brizoUri,\r\n        brizoAddress,\r\n        secretStoreUri,\r\n        verbose\r\n    }\r\n    const ocean: any = await Ocean.getInstance(config)\r\n    return { ocean }\r\n}\r\n\r\n//\r\n// Faucet\r\n//\r\nexport interface FaucetResponse {\r\n    success: boolean\r\n    message: string\r\n    trxHash?: string\r\n}\r\n\r\nexport async function requestFromFaucet(account: string) {\r\n    try {\r\n        const url = `${faucetUri}/faucet`\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                address: account,\r\n                agent: 'commons'\r\n            })\r\n        })\r\n        return response.json()\r\n    } catch (error) {\r\n        Logger.error('requestFromFaucet', error.message)\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}