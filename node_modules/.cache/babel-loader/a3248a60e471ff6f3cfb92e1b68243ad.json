{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Brian\\\\Projects\\\\ResearchHub\\\\research-hub\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Brian\\\\Projects\\\\ResearchHub\\\\research-hub\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Brian\\\\Projects\\\\ResearchHub\\\\research-hub\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Brian\\\\Projects\\\\ResearchHub\\\\research-hub\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport Web3 from 'web3';\nexport var MetamaskProvider =\n/*#__PURE__*/\nfunction () {\n  function MetamaskProvider() {\n    _classCallCheck(this, MetamaskProvider);\n\n    this.web3 = void 0;\n    // Default\n    this.web3 = null; // Modern dapp browsers\n\n    if (window.ethereum) {\n      this.web3 = new Web3(window.ethereum);\n    } // Legacy dapp browsers\n    else if (window.web3) {\n        this.web3 = new Web3(window.web3.currentProvider);\n      }\n  }\n\n  _createClass(MetamaskProvider, [{\n    key: \"isAvailable\",\n    value: function () {\n      var _isAvailable = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.web3 !== null);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function isAvailable() {\n        return _isAvailable.apply(this, arguments);\n      }\n\n      return isAvailable;\n    }()\n  }, {\n    key: \"isLogged\",\n    value: function () {\n      var _isLogged = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.web3 === null)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 2:\n                _context2.next = 4;\n                return this.web3.eth.getAccounts();\n\n              case 4:\n                _context2.t0 = _context2.sent.length;\n\n                if (!(_context2.t0 > 0)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", true);\n\n              case 7:\n                return _context2.abrupt(\"return\", false);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function isLogged() {\n        return _isLogged.apply(this, arguments);\n      }\n\n      return isLogged;\n    }()\n  }, {\n    key: \"startLogin\",\n    value: function () {\n      var _startLogin = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return window.ethereum.enable();\n\n              case 3:\n                localStorage.setItem('logType', 'Metamask');\n                _context3.next = 9;\n                break;\n\n              case 6:\n                _context3.prev = 6;\n                _context3.t0 = _context3[\"catch\"](0);\n                return _context3.abrupt(\"return\", false);\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[0, 6]]);\n      }));\n\n      function startLogin() {\n        return _startLogin.apply(this, arguments);\n      }\n\n      return startLogin;\n    }()\n  }, {\n    key: \"logout\",\n    value: function () {\n      var _logout = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                localStorage.removeItem('logType'); // reload page?\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function logout() {\n        return _logout.apply(this, arguments);\n      }\n\n      return logout;\n    }()\n  }, {\n    key: \"getProvider\",\n    value: function getProvider() {\n      return this.web3;\n    }\n  }]);\n\n  return MetamaskProvider;\n}();","map":{"version":3,"sources":["C:/Users/Brian/Projects/ResearchHub/research-hub/client/src/context/MetamaskProvider.ts"],"names":["Web3","MetamaskProvider","web3","window","ethereum","currentProvider","eth","getAccounts","length","enable","localStorage","setItem","removeItem"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,WAAaC,gBAAb;AAAA;AAAA;AAGI,8BAAqB;AAAA;;AAAA,SAFbC,IAEa;AACjB;AACA,SAAKA,IAAL,GAAY,IAAZ,CAFiB,CAGjB;;AACA,QAAIC,MAAM,CAACC,QAAX,EAAqB;AACjB,WAAKF,IAAL,GAAY,IAAIF,IAAJ,CAASG,MAAM,CAACC,QAAhB,CAAZ;AACH,KAFD,CAGA;AAHA,SAIK,IAAID,MAAM,CAACD,IAAX,EAAiB;AAClB,aAAKA,IAAL,GAAY,IAAIF,IAAJ,CAASG,MAAM,CAACD,IAAP,CAAYG,eAArB,CAAZ;AACH;AACJ;;AAdL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAiBe,KAAKH,IAAL,KAAc,IAjB7B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAqBY,KAAKA,IAAL,KAAc,IArB1B;AAAA;AAAA;AAAA;;AAAA,kDAqBuC,KArBvC;;AAAA;AAAA;AAAA,uBAsBmB,KAAKA,IAAL,CAAUI,GAAV,CAAcC,WAAd,EAtBnB;;AAAA;AAAA,8CAsBgDC,MAtBhD;;AAAA,qCAsByD,CAtBzD;AAAA;AAAA;AAAA;;AAAA,kDAuBmB,IAvBnB;;AAAA;AAAA,kDAyBe,KAzBf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA8BkBL,MAAM,CAACC,QAAP,CAAgBK,MAAhB,EA9BlB;;AAAA;AA+BYC,gBAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgC,UAAhC;AA/BZ;AAAA;;AAAA;AAAA;AAAA;AAAA,kDAiCmB,KAjCnB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsCQD,gBAAAA,YAAY,CAACE,UAAb,CAAwB,SAAxB,EAtCR,CAuCQ;;AAvCR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kCA0CyB;AACjB,aAAO,KAAKV,IAAZ;AACH;AA5CL;;AAAA;AAAA","sourcesContent":["import Web3 from 'web3'\r\n\r\nexport class MetamaskProvider {\r\n    private web3: Web3\r\n\r\n    public constructor() {\r\n        // Default\r\n        this.web3 = null as any\r\n        // Modern dapp browsers\r\n        if (window.ethereum) {\r\n            this.web3 = new Web3(window.ethereum)\r\n        }\r\n        // Legacy dapp browsers\r\n        else if (window.web3) {\r\n            this.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n    }\r\n\r\n    public async isAvailable() {\r\n        return this.web3 !== null\r\n    }\r\n\r\n    public async isLogged() {\r\n        if (this.web3 === null) return false\r\n        if ((await this.web3.eth.getAccounts()).length > 0) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    public async startLogin() {\r\n        try {\r\n            await window.ethereum.enable()\r\n            localStorage.setItem('logType', 'Metamask')\r\n        } catch (error) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    public async logout() {\r\n        localStorage.removeItem('logType')\r\n        // reload page?\r\n    }\r\n\r\n    public getProvider() {\r\n        return this.web3\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}