{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\src\\\\routes\\\\Publish\\\\Files\\\\Ipfs\\\\index.tsx\";\n\n/* eslint-disable no-console */\nimport React, { useState, useEffect } from 'react';\nimport useIpfsApi from '../../../../hooks/use-ipfs-api';\nimport Spinner from '../../../../components/atoms/Spinner';\nimport Dropzone from '../../../../components/molecules/Dropzone';\nimport { formatBytes, pingUrl, streamFiles } from '../../../../utils/utils';\nimport { ipfsGatewayUri, ipfsNodeUri } from '../../../../config';\nimport Form from './Form';\nexport default function Ipfs(_ref) {\n  var addFile = _ref.addFile;\n\n  var _ref2 = new URL(ipfsNodeUri),\n      hostname = _ref2.hostname,\n      port = _ref2.port,\n      protocol = _ref2.protocol;\n\n  var ipfsConfig = {\n    protocol: protocol.replace(':', ''),\n    host: hostname,\n    port: port || '443'\n  };\n\n  var _useIpfsApi = useIpfsApi(ipfsConfig),\n      ipfs = _useIpfsApi.ipfs,\n      isIpfsReady = _useIpfsApi.isIpfsReady,\n      ipfsError = _useIpfsApi.ipfsError,\n      ipfsMessage = _useIpfsApi.ipfsMessage;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      message = _useState4[0],\n      setMessage = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      fileSize = _useState6[0],\n      setFileSize = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 1),\n      fileSizeReceived = _useState8[0];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      error = _useState10[0],\n      setError = _useState10[1];\n\n  useEffect(function () {\n    setMessage(\"Adding to IPFS<br />\\n             <small>\".concat(fileSizeReceived || 0, \"/\").concat(fileSize, \"</small><br />\"));\n  }, [fileSize, fileSizeReceived]);\n\n  function addToIpfs(_x) {\n    return _addToIpfs.apply(this, arguments);\n  }\n\n  function _addToIpfs() {\n    _addToIpfs = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(data) {\n      var cid;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return streamFiles(ipfs, data);\n\n            case 3:\n              cid = _context.sent;\n              console.log(\"File added: \".concat(cid));\n              return _context.abrupt(\"return\", cid);\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              setError(\"Adding to IPFS failed: \".concat(_context.t0.message));\n              setLoading(false);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n    return _addToIpfs.apply(this, arguments);\n  }\n\n  function handleOnDrop(_x2) {\n    return _handleOnDrop.apply(this, arguments);\n  }\n\n  function _handleOnDrop() {\n    _handleOnDrop = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(acceptedFiles) {\n      var file, path, size, totalSize, fileDetails, cid, urlGateway, url, isAvailable;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (acceptedFiles[0]) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              setLoading(true);\n              setError('');\n              file = acceptedFiles[0];\n              path = file.path, size = file.size;\n              totalSize = formatBytes(size, 0);\n              setFileSize(totalSize); // Add file to IPFS node\n\n              fileDetails = {\n                path: path,\n                content: file\n              };\n              _context2.next = 11;\n              return addToIpfs(fileDetails);\n\n            case 11:\n              cid = _context2.sent;\n\n              if (cid) {\n                _context2.next = 14;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 14:\n              // Ping gateway url to make it globally available,\n              // but store native url in DDO.\n              urlGateway = \"\".concat(ipfsGatewayUri, \"/ipfs/\").concat(cid, \"/\").concat(path);\n              url = \"ipfs://\".concat(cid, \"/\").concat(path);\n              setMessage('Checking IPFS gateway URL');\n              _context2.next = 19;\n              return pingUrl(urlGateway);\n\n            case 19:\n              isAvailable = _context2.sent;\n              // add IPFS url to file.url\n              isAvailable && addFile(url);\n\n            case 21:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _handleOnDrop.apply(this, arguments);\n  }\n\n  return React.createElement(Form, {\n    error: error,\n    ipfsMessage: ipfsMessage,\n    ipfsError: ipfsError,\n    isIpfsReady: isIpfsReady,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, loading ? React.createElement(Spinner, {\n    message: message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }) : React.createElement(Dropzone, {\n    multiple: false,\n    handleOnDrop: handleOnDrop,\n    disabled: !isIpfsReady,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["C:/Users/Brian/Projects/SoundWaves/sound-waves/client/src/routes/Publish/Files/Ipfs/index.tsx"],"names":["React","useState","useEffect","useIpfsApi","Spinner","Dropzone","formatBytes","pingUrl","streamFiles","ipfsGatewayUri","ipfsNodeUri","Form","Ipfs","addFile","URL","hostname","port","protocol","ipfsConfig","replace","host","ipfs","isIpfsReady","ipfsError","ipfsMessage","loading","setLoading","message","setMessage","fileSize","setFileSize","fileSizeReceived","error","setError","addToIpfs","data","cid","console","log","handleOnDrop","acceptedFiles","file","path","size","totalSize","fileDetails","content","urlGateway","url","isAvailable"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\r\nimport React, { useState, useEffect } from 'react'\r\nimport useIpfsApi, { IpfsConfig } from '../../../../hooks/use-ipfs-api'\r\nimport Spinner from '../../../../components/atoms/Spinner'\r\nimport Dropzone from '../../../../components/molecules/Dropzone'\r\nimport { formatBytes, pingUrl, streamFiles } from '../../../../utils/utils'\r\nimport { ipfsGatewayUri, ipfsNodeUri } from '../../../../config'\r\nimport Form from './Form'\r\n\r\nexport default function Ipfs({ addFile }: { addFile(url: string): void }) {\r\n    const { hostname, port, protocol } = new URL(ipfsNodeUri)\r\n\r\n    const ipfsConfig: IpfsConfig = {\r\n        protocol: protocol.replace(':', ''),\r\n        host: hostname,\r\n        port: port || '443'\r\n    }\r\n\r\n    const { ipfs, isIpfsReady, ipfsError, ipfsMessage } = useIpfsApi(ipfsConfig)\r\n    const [loading, setLoading] = useState(false)\r\n    const [message, setMessage] = useState('')\r\n    const [fileSize, setFileSize] = useState('')\r\n    const [fileSizeReceived] = useState('')\r\n    const [error, setError] = useState('')\r\n\r\n    useEffect(() => {\r\n        setMessage(\r\n            `Adding to IPFS<br />\r\n             <small>${fileSizeReceived || 0}/${fileSize}</small><br />`\r\n        )\r\n    }, [fileSize, fileSizeReceived])\r\n\r\n    async function addToIpfs(data: any) {\r\n        try {\r\n            const cid = await streamFiles(ipfs, data)\r\n            console.log(`File added: ${cid}`)\r\n            return cid\r\n        } catch (error) {\r\n            setError(`Adding to IPFS failed: ${error.message}`)\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    async function handleOnDrop(acceptedFiles: any) {\r\n        if (!acceptedFiles[0]) return\r\n\r\n        setLoading(true)\r\n        setError('')\r\n\r\n        const file = acceptedFiles[0]\r\n        const { path, size } = file\r\n        const totalSize = formatBytes(size, 0)\r\n        setFileSize(totalSize)\r\n\r\n        // Add file to IPFS node\r\n        const fileDetails = { path, content: file }\r\n\r\n        const cid = await addToIpfs(fileDetails)\r\n        if (!cid) return\r\n\r\n        // Ping gateway url to make it globally available,\r\n        // but store native url in DDO.\r\n        const urlGateway = `${ipfsGatewayUri}/ipfs/${cid}/${path}`\r\n        const url = `ipfs://${cid}/${path}`\r\n\r\n        setMessage('Checking IPFS gateway URL')\r\n\r\n        const isAvailable = await pingUrl(urlGateway)\r\n        // add IPFS url to file.url\r\n        isAvailable && addFile(url)\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            error={error}\r\n            ipfsMessage={ipfsMessage}\r\n            ipfsError={ipfsError}\r\n            isIpfsReady={isIpfsReady}\r\n        >\r\n            {loading ? (\r\n                <Spinner message={message} />\r\n            ) : (\r\n                <Dropzone\r\n                    multiple={false}\r\n                    handleOnDrop={handleOnDrop}\r\n                    disabled={!isIpfsReady}\r\n                />\r\n            )}\r\n        </Form>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}