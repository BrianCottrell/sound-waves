{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Brian\\\\Projects\\\\ResearchHub\\\\research-hub\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Brian\\\\Projects\\\\ResearchHub\\\\research-hub\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Brian\\\\Projects\\\\ResearchHub\\\\research-hub\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Brian\\\\Projects\\\\ResearchHub\\\\research-hub\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport Web3 from 'web3';\nimport HDWalletProvider from '@truffle/hdwallet-provider';\nimport { nodeUri } from '../config';\nimport { requestFromFaucet } from '../ocean'; // eslint-disable-next-line @typescript-eslint/no-var-requires\n\nvar bip39 = require('bip39');\n\nexport var BurnerWalletProvider =\n/*#__PURE__*/\nfunction () {\n  function BurnerWalletProvider() {\n    _classCallCheck(this, BurnerWalletProvider);\n\n    this.web3 = void 0;\n    // Default\n    this.web3 = null;\n  }\n\n  _createClass(BurnerWalletProvider, [{\n    key: \"isLogged\",\n    value: function () {\n      var _isLogged = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(localStorage.getItem('seedphrase') !== null)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", true);\n\n              case 2:\n                return _context.abrupt(\"return\", false);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function isLogged() {\n        return _isLogged.apply(this, arguments);\n      }\n\n      return isLogged;\n    }()\n  }, {\n    key: \"startLogin\",\n    value: function () {\n      var _startLogin = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var mnemonic, isLogged, provider, accounts, balance;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.isLogged();\n\n              case 2:\n                isLogged = _context2.sent;\n\n                if (isLogged) {\n                  mnemonic = localStorage.getItem('seedphrase');\n                } else {\n                  mnemonic = bip39.generateMnemonic();\n                  localStorage.setItem('seedphrase', mnemonic);\n                }\n\n                localStorage.setItem('logType', 'BurnerWallet');\n                provider = new HDWalletProvider(mnemonic, nodeUri, 0, 1);\n                this.web3 = new Web3(provider);\n                _context2.next = 9;\n                return this.web3.eth.getAccounts();\n\n              case 9:\n                accounts = _context2.sent;\n                _context2.next = 12;\n                return this.web3.eth.getBalance(accounts[0]);\n\n              case 12:\n                balance = _context2.sent;\n                _context2.t0 = balance === '0';\n\n                if (!_context2.t0) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                _context2.next = 17;\n                return requestFromFaucet(provider.getAddress(0));\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function startLogin() {\n        return _startLogin.apply(this, arguments);\n      }\n\n      return startLogin;\n    }()\n  }, {\n    key: \"logout\",\n    value: function () {\n      var _logout = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // localStorage.removeItem('seedphrase')\n                localStorage.removeItem('logType');\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function logout() {\n        return _logout.apply(this, arguments);\n      }\n\n      return logout;\n    }()\n  }, {\n    key: \"getProvider\",\n    value: function getProvider() {\n      return this.web3;\n    }\n  }]);\n\n  return BurnerWalletProvider;\n}();","map":{"version":3,"sources":["C:/Users/Brian/Projects/ResearchHub/research-hub/client/src/context/BurnerWalletProvider.ts"],"names":["Web3","HDWalletProvider","nodeUri","requestFromFaucet","bip39","require","BurnerWalletProvider","web3","localStorage","getItem","isLogged","mnemonic","generateMnemonic","setItem","provider","eth","getAccounts","accounts","getBalance","balance","getAddress","removeItem"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,iBAAT,QAAkC,UAAlC,C,CAEA;;AACA,IAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,WAAaC,oBAAb;AAAA;AAAA;AAGI,kCAAqB;AAAA;;AAAA,SAFbC,IAEa;AACjB;AACA,SAAKA,IAAL,GAAY,IAAZ;AACH;;AANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBASYC,YAAY,CAACC,OAAb,CAAqB,YAArB,MAAuC,IATnD;AAAA;AAAA;AAAA;;AAAA,iDAUmB,IAVnB;;AAAA;AAAA,iDAYe,KAZf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAiB+B,KAAKC,QAAL,EAjB/B;;AAAA;AAiBcA,gBAAAA,QAjBd;;AAmBQ,oBAAIA,QAAJ,EAAc;AACVC,kBAAAA,QAAQ,GAAGH,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAX;AACH,iBAFD,MAEO;AACHE,kBAAAA,QAAQ,GAAGP,KAAK,CAACQ,gBAAN,EAAX;AACAJ,kBAAAA,YAAY,CAACK,OAAb,CAAqB,YAArB,EAAmCF,QAAnC;AACH;;AAEDH,gBAAAA,YAAY,CAACK,OAAb,CAAqB,SAArB,EAAgC,cAAhC;AACMC,gBAAAA,QA3Bd,GA2ByB,IAAIb,gBAAJ,CAAqBU,QAArB,EAA+BT,OAA/B,EAAwC,CAAxC,EAA2C,CAA3C,CA3BzB;AA4BQ,qBAAKK,IAAL,GAAY,IAAIP,IAAJ,CAASc,QAAT,CAAZ;AA5BR;AAAA,uBA6B+B,KAAKP,IAAL,CAAUQ,GAAV,CAAcC,WAAd,EA7B/B;;AAAA;AA6BcC,gBAAAA,QA7Bd;AAAA;AAAA,uBA8B8B,KAAKV,IAAL,CAAUQ,GAAV,CAAcG,UAAd,CAAyBD,QAAQ,CAAC,CAAD,CAAjC,CA9B9B;;AAAA;AA8BcE,gBAAAA,OA9Bd;AAAA,+BAiCQA,OAAO,KAAK,GAjCpB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAiCkChB,iBAAiB,CAACW,QAAQ,CAACM,UAAT,CAAoB,CAApB,CAAD,CAjCnD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqCQ;AACAZ,gBAAAA,YAAY,CAACa,UAAb,CAAwB,SAAxB;;AAtCR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kCAyCyB;AACjB,aAAO,KAAKd,IAAZ;AACH;AA3CL;;AAAA;AAAA","sourcesContent":["import Web3 from 'web3'\r\nimport HDWalletProvider from '@truffle/hdwallet-provider'\r\nimport { nodeUri } from '../config'\r\nimport { requestFromFaucet } from '../ocean'\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-var-requires\r\nconst bip39 = require('bip39')\r\n\r\nexport class BurnerWalletProvider {\r\n    private web3: Web3\r\n\r\n    public constructor() {\r\n        // Default\r\n        this.web3 = null as any\r\n    }\r\n\r\n    public async isLogged() {\r\n        if (localStorage.getItem('seedphrase') !== null) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    public async startLogin() {\r\n        let mnemonic\r\n        const isLogged = await this.isLogged()\r\n\r\n        if (isLogged) {\r\n            mnemonic = localStorage.getItem('seedphrase')\r\n        } else {\r\n            mnemonic = bip39.generateMnemonic()\r\n            localStorage.setItem('seedphrase', mnemonic)\r\n        }\r\n\r\n        localStorage.setItem('logType', 'BurnerWallet')\r\n        const provider = new HDWalletProvider(mnemonic, nodeUri, 0, 1)\r\n        this.web3 = new Web3(provider as any)\r\n        const accounts = await this.web3.eth.getAccounts()\r\n        const balance = await this.web3.eth.getBalance(accounts[0])\r\n\r\n        // fill with Ether if account balance is empty\r\n        balance === '0' && (await requestFromFaucet(provider.getAddress(0)))\r\n    }\r\n\r\n    public async logout() {\r\n        // localStorage.removeItem('seedphrase')\r\n        localStorage.removeItem('logType')\r\n    }\r\n\r\n    public getProvider() {\r\n        return this.web3\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}