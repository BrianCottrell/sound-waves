{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\src\\\\routes\\\\Publish\\\\Files\\\\ItemForm.tsx\";\nimport React, { PureComponent } from 'react';\nimport isUrl from 'is-url-superb';\nimport Input from '../../../components/atoms/Form/Input';\nimport Button from '../../../components/atoms/Button';\nimport styles from './ItemForm.module.scss';\n\nvar ItemForm =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(ItemForm, _PureComponent);\n\n  function ItemForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ItemForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ItemForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      url: '',\n      hasError: false,\n      noUrl: false\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n      var url = _this.state.url; // return when required fields are empty, and url value is no url\n      // Can't use browser validation cause we are in a form within a form\n\n      if (!url) {\n        _this.setState({\n          hasError: true\n        });\n\n        return;\n      }\n\n      if (url && !url.includes('ipfs://') && !isUrl(url)) {\n        _this.setState({\n          noUrl: true\n        });\n\n        return;\n      }\n\n      _this.props.addFile(url);\n    };\n\n    _this.onChangeUrl = function (e) {\n      _this.setState({\n        url: e.currentTarget.value\n      });\n\n      _this.clearErrors();\n    };\n\n    return _this;\n  }\n\n  _createClass(ItemForm, [{\n    key: \"clearErrors\",\n    value: function clearErrors() {\n      if (this.state.hasError) this.setState({\n        hasError: false\n      });\n      if (this.state.noUrl) this.setState({\n        noUrl: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          url = _this$state.url,\n          hasError = _this$state.hasError,\n          noUrl = _this$state.noUrl;\n      return React.createElement(\"div\", {\n        className: styles.itemForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(Input, {\n        label: \"Url\",\n        name: \"url\",\n        required: true,\n        type: \"url\",\n        placeholder: this.props.placeholder,\n        value: url,\n        onChange: this.onChangeUrl,\n        help: \"Supported protocols are http(s):// and ipfs://\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: function onClick(e) {\n          return _this2.handleSubmit(e);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Add File\"), hasError && React.createElement(\"span\", {\n        className: styles.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Please fill in all required fields.\"), noUrl && React.createElement(\"span\", {\n        className: styles.error,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Please enter a valid URL.\"));\n    }\n  }]);\n\n  return ItemForm;\n}(PureComponent);\n\nexport { ItemForm as default };","map":{"version":3,"sources":["C:/Users/Brian/Projects/SoundWaves/sound-waves/client/src/routes/Publish/Files/ItemForm.tsx"],"names":["React","PureComponent","isUrl","Input","Button","styles","ItemForm","state","url","hasError","noUrl","handleSubmit","e","preventDefault","setState","includes","props","addFile","onChangeUrl","currentTarget","value","clearErrors","itemForm","placeholder","error"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,KAAP,MAAkB,sCAAlB;AACA,OAAOC,MAAP,MAAmB,kCAAnB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;;IAaqBC,Q;;;;;;;;;;;;;;;;;UAIVC,K,GAAwB;AAC3BC,MAAAA,GAAG,EAAE,EADsB;AAE3BC,MAAAA,QAAQ,EAAE,KAFiB;AAG3BC,MAAAA,KAAK,EAAE;AAHoB,K;;UAMvBC,Y,GAAe,UAACC,CAAD,EAAc;AACjCA,MAAAA,CAAC,CAACC,cAAF;AADiC,UAGzBL,GAHyB,GAGjB,MAAKD,KAHY,CAGzBC,GAHyB,EAKjC;AACA;;AACA,UAAI,CAACA,GAAL,EAAU;AACN,cAAKM,QAAL,CAAc;AAAEL,UAAAA,QAAQ,EAAE;AAAZ,SAAd;;AACA;AACH;;AAED,UAAID,GAAG,IAAI,CAACA,GAAG,CAACO,QAAJ,CAAa,SAAb,CAAR,IAAmC,CAACb,KAAK,CAACM,GAAD,CAA7C,EAAoD;AAChD,cAAKM,QAAL,CAAc;AAAEJ,UAAAA,KAAK,EAAE;AAAT,SAAd;;AACA;AACH;;AAED,YAAKM,KAAL,CAAWC,OAAX,CAAmBT,GAAnB;AACH,K;;UAEOU,W,GAAc,UAACN,CAAD,EAA0C;AAC5D,YAAKE,QAAL,CAAc;AAAEN,QAAAA,GAAG,EAAEI,CAAC,CAACO,aAAF,CAAgBC;AAAvB,OAAd;;AACA,YAAKC,WAAL;AACH,K;;;;;;;kCAEqB;AAClB,UAAI,KAAKd,KAAL,CAAWE,QAAf,EAAyB,KAAKK,QAAL,CAAc;AAAEL,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACzB,UAAI,KAAKF,KAAL,CAAWG,KAAf,EAAsB,KAAKI,QAAL,CAAc;AAAEJ,QAAAA,KAAK,EAAE;AAAT,OAAd;AACzB;;;6BAEe;AAAA;;AAAA,wBACqB,KAAKH,KAD1B;AAAA,UACJC,GADI,eACJA,GADI;AAAA,UACCC,QADD,eACCA,QADD;AAAA,UACWC,KADX,eACWA,KADX;AAGZ,aACI;AAAK,QAAA,SAAS,EAAEL,MAAM,CAACiB,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AACI,QAAA,KAAK,EAAC,KADV;AAEI,QAAA,IAAI,EAAC,KAFT;AAGI,QAAA,QAAQ,MAHZ;AAII,QAAA,IAAI,EAAC,KAJT;AAKI,QAAA,WAAW,EAAE,KAAKN,KAAL,CAAWO,WAL5B;AAMI,QAAA,KAAK,EAAEf,GANX;AAOI,QAAA,QAAQ,EAAE,KAAKU,WAPnB;AAQI,QAAA,IAAI,EAAC,gDART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAYI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,iBAACN,CAAD;AAAA,iBAAc,MAAI,CAACD,YAAL,CAAkBC,CAAlB,CAAd;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAZJ,EAgBKH,QAAQ,IACL;AAAM,QAAA,SAAS,EAAEJ,MAAM,CAACmB,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAjBR,EAqBKd,KAAK,IACF;AAAM,QAAA,SAAS,EAAEL,MAAM,CAACmB,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAtBR,CADJ;AA6BH;;;;EAxEiCvB,a;;SAAjBK,Q","sourcesContent":["import React, { PureComponent } from 'react'\r\nimport isUrl from 'is-url-superb'\r\nimport Input from '../../../components/atoms/Form/Input'\r\nimport Button from '../../../components/atoms/Button'\r\nimport styles from './ItemForm.module.scss'\r\n\r\ninterface ItemFormProps {\r\n    addFile(url: string): void\r\n    placeholder: string\r\n}\r\n\r\ninterface ItemFormStates {\r\n    url: string\r\n    hasError: boolean\r\n    noUrl: boolean\r\n}\r\n\r\nexport default class ItemForm extends PureComponent<\r\n    ItemFormProps,\r\n    ItemFormStates\r\n> {\r\n    public state: ItemFormStates = {\r\n        url: '',\r\n        hasError: false,\r\n        noUrl: false\r\n    }\r\n\r\n    private handleSubmit = (e: Event) => {\r\n        e.preventDefault()\r\n\r\n        const { url } = this.state\r\n\r\n        // return when required fields are empty, and url value is no url\r\n        // Can't use browser validation cause we are in a form within a form\r\n        if (!url) {\r\n            this.setState({ hasError: true })\r\n            return\r\n        }\r\n\r\n        if (url && !url.includes('ipfs://') && !isUrl(url)) {\r\n            this.setState({ noUrl: true })\r\n            return\r\n        }\r\n\r\n        this.props.addFile(url)\r\n    }\r\n\r\n    private onChangeUrl = (e: React.FormEvent<HTMLInputElement>) => {\r\n        this.setState({ url: e.currentTarget.value })\r\n        this.clearErrors()\r\n    }\r\n\r\n    private clearErrors() {\r\n        if (this.state.hasError) this.setState({ hasError: false })\r\n        if (this.state.noUrl) this.setState({ noUrl: false })\r\n    }\r\n\r\n    public render() {\r\n        const { url, hasError, noUrl } = this.state\r\n\r\n        return (\r\n            <div className={styles.itemForm}>\r\n                <Input\r\n                    label=\"Url\"\r\n                    name=\"url\"\r\n                    required\r\n                    type=\"url\"\r\n                    placeholder={this.props.placeholder}\r\n                    value={url}\r\n                    onChange={this.onChangeUrl}\r\n                    help=\"Supported protocols are http(s):// and ipfs://\"\r\n                />\r\n\r\n                <Button onClick={(e: Event) => this.handleSubmit(e)}>\r\n                    Add File\r\n                </Button>\r\n\r\n                {hasError && (\r\n                    <span className={styles.error}>\r\n                        Please fill in all required fields.\r\n                    </span>\r\n                )}\r\n                {noUrl && (\r\n                    <span className={styles.error}>\r\n                        Please enter a valid URL.\r\n                    </span>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}