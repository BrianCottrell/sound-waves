{"ast":null,"code":"\"use strict\";\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[LogLevel[\"None\"] = -1] = \"None\";\n  LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\n  LogLevel[LogLevel[\"Warn\"] = 1] = \"Warn\";\n  LogLevel[LogLevel[\"Log\"] = 2] = \"Log\";\n  LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\n\nvar Logger = function () {\n  function Logger(logLevel) {\n    if (logLevel === void 0) {\n      logLevel = LogLevel.Verbose;\n    }\n\n    this.logLevel = logLevel;\n  }\n\n  Logger.prototype.setLevel = function (logLevel) {\n    this.logLevel = logLevel;\n  };\n\n  Logger.prototype.bypass = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this.dispatch.apply(this, __spreadArrays(['log', -Infinity], args));\n  };\n\n  Logger.prototype.debug = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this.dispatch.apply(this, __spreadArrays(['debug', LogLevel.Verbose], args));\n  };\n\n  Logger.prototype.log = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this.dispatch.apply(this, __spreadArrays(['log', LogLevel.Log], args));\n  };\n\n  Logger.prototype.warn = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this.dispatch.apply(this, __spreadArrays(['warn', LogLevel.Warn], args));\n  };\n\n  Logger.prototype.error = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    this.dispatch.apply(this, __spreadArrays(['error', LogLevel.Error], args));\n  };\n\n  Logger.prototype.dispatch = function (verb, level) {\n    var args = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      args[_i - 2] = arguments[_i];\n    }\n\n    if (this.logLevel >= level) {\n      console[verb].apply(console, args);\n    }\n  };\n\n  return Logger;\n}();\n\nexports.Logger = Logger;\nexports.LoggerInstance = new Logger();\nexports.default = exports.LoggerInstance;","map":null,"metadata":{},"sourceType":"script"}