{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\src\\\\context\\\\UserProvider.tsx\";\nimport React, { PureComponent } from 'react';\nimport Web3 from 'web3';\nimport { User } from '.';\nimport { provideOcean, requestFromFaucet as _requestFromFaucet } from '../ocean';\nimport { nodeUri } from '../config';\nimport MarketProvider from './MarketProvider';\nimport { MetamaskProvider } from './MetamaskProvider';\nimport { BurnerWalletProvider } from './BurnerWalletProvider';\nvar POLL_ACCOUNTS = 1000; // every 1s\n\nvar POLL_NETWORK = POLL_ACCOUNTS * 60; // every 1 min\n\nvar DEFAULT_WEB3 = new Web3(new Web3.providers.HttpProvider(nodeUri)); // default web3\n\nvar UserProvider =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(UserProvider, _PureComponent);\n\n  function UserProvider() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, UserProvider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UserProvider)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.loginMetamask =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var metamaskProvider, web3;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              metamaskProvider = new MetamaskProvider();\n              _context.next = 3;\n              return metamaskProvider.startLogin();\n\n            case 3:\n              web3 = metamaskProvider.getProvider();\n\n              _this.setState({\n                isLogged: true,\n                isBurner: false,\n                web3: web3\n              }, function () {\n                _this.loadOcean();\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    _this.loginBurnerWallet =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var burnerwalletProvider, web3;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              burnerwalletProvider = new BurnerWalletProvider();\n              _context2.next = 3;\n              return burnerwalletProvider.startLogin();\n\n            case 3:\n              web3 = burnerwalletProvider.getProvider();\n\n              _this.setState({\n                isLogged: true,\n                isBurner: true,\n                web3: web3\n              }, function () {\n                _this.loadOcean();\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    _this.logoutBurnerWallet =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var burnerwalletProvider;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              burnerwalletProvider = new BurnerWalletProvider();\n              _context3.next = 3;\n              return burnerwalletProvider.logout();\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    _this.state = {\n      isLogged: false,\n      isBurner: false,\n      isWeb3Capable: Boolean(window.web3 || window.ethereum),\n      isLoading: true,\n      balance: {\n        eth: 0,\n        ocn: 0\n      },\n      network: '',\n      web3: DEFAULT_WEB3,\n      account: '',\n      ocean: {},\n      requestFromFaucet: function requestFromFaucet() {\n        return _requestFromFaucet('');\n      },\n      loginMetamask: function loginMetamask() {\n        return _this.loginMetamask();\n      },\n      loginBurnerWallet: function loginBurnerWallet() {\n        return _this.loginBurnerWallet();\n      },\n      logoutBurnerWallet: function logoutBurnerWallet() {\n        return _this.logoutBurnerWallet();\n      },\n      message: '' // 'Connecting to Ocean...'\n\n    };\n    _this.accountsInterval = null;\n    _this.networkInterval = null;\n    _this.loadDefaultWeb3 =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _this.setState({\n                isLogged: false,\n                isBurner: false,\n                web3: DEFAULT_WEB3\n              }, function () {\n                _this.loadOcean();\n              });\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    _this.loadOcean =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5() {\n      var _ref6, ocean;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return provideOcean(_this.state.web3);\n\n            case 2:\n              _ref6 = _context5.sent;\n              ocean = _ref6.ocean;\n\n              _this.setState({\n                ocean: ocean,\n                isLoading: false\n              }, function () {\n                _this.initNetworkPoll();\n\n                _this.initAccountsPoll();\n\n                _this.fetchNetwork();\n\n                _this.fetchAccounts();\n              });\n\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    _this.bootstrap =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6() {\n      var logType, metamaskProvider, web3;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              logType = localStorage.getItem('logType');\n              metamaskProvider = new MetamaskProvider();\n              _context6.t0 = logType;\n              _context6.next = _context6.t0 === 'Metamask' ? 5 : _context6.t0 === 'BurnerWallet' ? 19 : 21;\n              break;\n\n            case 5:\n              _context6.next = 7;\n              return metamaskProvider.isAvailable();\n\n            case 7:\n              _context6.t1 = _context6.sent;\n\n              if (!_context6.t1) {\n                _context6.next = 12;\n                break;\n              }\n\n              _context6.next = 11;\n              return metamaskProvider.isLogged();\n\n            case 11:\n              _context6.t1 = _context6.sent;\n\n            case 12:\n              if (!_context6.t1) {\n                _context6.next = 17;\n                break;\n              }\n\n              web3 = metamaskProvider.getProvider();\n\n              _this.setState({\n                isLogged: true,\n                web3: web3\n              }, function () {\n                _this.loadOcean();\n              });\n\n              _context6.next = 18;\n              break;\n\n            case 17:\n              _this.loadDefaultWeb3();\n\n            case 18:\n              return _context6.abrupt(\"break\", 23);\n\n            case 19:\n              _this.loginBurnerWallet();\n\n              return _context6.abrupt(\"break\", 23);\n\n            case 21:\n              _this.loginBurnerWallet();\n\n              return _context6.abrupt(\"break\", 23);\n\n            case 23:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    _this.fetchAccounts =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee7() {\n      var _this$state, ocean, isLogged, accounts, _account;\n\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _this$state = _this.state, ocean = _this$state.ocean, isLogged = _this$state.isLogged;\n\n              if (!isLogged) {\n                _context7.next = 17;\n                break;\n              }\n\n              // Modern dapp browsers\n              if (window.ethereum && !isLogged) {\n                // simply set to empty, and have user click a button somewhere\n                // to initiate account unlocking\n                accounts = []; // alternatively, automatically prompt for account unlocking\n                // await this.unlockAccounts()\n              }\n\n              _context7.next = 5;\n              return ocean.accounts.list();\n\n            case 5:\n              accounts = _context7.sent;\n\n              if (!(accounts.length > 0)) {\n                _context7.next = 16;\n                break;\n              }\n\n              _context7.next = 9;\n              return accounts[0].getId();\n\n            case 9:\n              _account = _context7.sent;\n\n              if (!(_account !== _this.state.account)) {\n                _context7.next = 14;\n                break;\n              }\n\n              _this.setState({\n                account: _account,\n                isLogged: true,\n                requestFromFaucet: function requestFromFaucet() {\n                  return _requestFromFaucet(_account);\n                }\n              });\n\n              _context7.next = 14;\n              return _this.fetchBalance(accounts[0]);\n\n            case 14:\n              _context7.next = 17;\n              break;\n\n            case 16:\n              !isLogged && _this.setState({\n                isLogged: false,\n                account: ''\n              });\n\n            case 17:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    _this.fetchBalance =\n    /*#__PURE__*/\n    function () {\n      var _ref9 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(account) {\n        var balance, eth, ocn;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return account.getBalance();\n\n              case 2:\n                balance = _context8.sent;\n                eth = balance.eth, ocn = balance.ocn;\n\n                if (eth !== _this.state.balance.eth || ocn !== _this.state.balance.ocn) {\n                  _this.setState({\n                    balance: {\n                      eth: eth,\n                      ocn: ocn\n                    }\n                  });\n                }\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      return function (_x) {\n        return _ref9.apply(this, arguments);\n      };\n    }();\n\n    _this.fetchNetwork =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee9() {\n      var ocean, network;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              ocean = _this.state.ocean;\n              network = 'Unknown';\n\n              if (!ocean.keeper) {\n                _context9.next = 6;\n                break;\n              }\n\n              _context9.next = 5;\n              return ocean.keeper.getNetworkName();\n\n            case 5:\n              network = _context9.sent;\n\n            case 6:\n              network !== _this.state.network && _this.setState({\n                network: network\n              });\n\n            case 7:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _this;\n  }\n\n  _createClass(UserProvider, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee10() {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.bootstrap();\n\n              case 2:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"initAccountsPoll\",\n    value: function initAccountsPoll() {\n      if (!this.accountsInterval) {\n        this.accountsInterval = setInterval(this.fetchAccounts, POLL_ACCOUNTS);\n      }\n    }\n  }, {\n    key: \"initNetworkPoll\",\n    value: function initNetworkPoll() {\n      if (!this.networkInterval) {\n        this.networkInterval = setInterval(this.fetchNetwork, POLL_NETWORK);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(User.Provider, {\n        value: this.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(MarketProvider, {\n        ocean: this.state.ocean,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, this.props.children));\n    }\n  }]);\n\n  return UserProvider;\n}(PureComponent);\n\nexport { UserProvider as default };","map":{"version":3,"sources":["C:/Users/Brian/Projects/SoundWaves/sound-waves/client/src/context/UserProvider.tsx"],"names":["React","PureComponent","Web3","User","provideOcean","requestFromFaucet","nodeUri","MarketProvider","MetamaskProvider","BurnerWalletProvider","POLL_ACCOUNTS","POLL_NETWORK","DEFAULT_WEB3","providers","HttpProvider","UserProvider","loginMetamask","metamaskProvider","startLogin","web3","getProvider","setState","isLogged","isBurner","loadOcean","loginBurnerWallet","burnerwalletProvider","logoutBurnerWallet","logout","state","isWeb3Capable","Boolean","window","ethereum","isLoading","balance","eth","ocn","network","account","ocean","message","accountsInterval","networkInterval","loadDefaultWeb3","initNetworkPoll","initAccountsPoll","fetchNetwork","fetchAccounts","bootstrap","logType","localStorage","getItem","isAvailable","accounts","list","length","getId","fetchBalance","getBalance","keeper","getNetworkName","setInterval","props","children"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport Web3 from 'web3';\r\nimport { Ocean, Account } from '@oceanprotocol/squid';\r\nimport { User } from '.';\r\nimport { provideOcean, requestFromFaucet, FaucetResponse } from '../ocean';\r\nimport { nodeUri } from '../config';\r\nimport MarketProvider from './MarketProvider';\r\nimport { MetamaskProvider } from './MetamaskProvider';\r\nimport { BurnerWalletProvider } from './BurnerWalletProvider';\r\n\r\nconst POLL_ACCOUNTS = 1000; // every 1s\r\nconst POLL_NETWORK = POLL_ACCOUNTS * 60; // every 1 min\r\nconst DEFAULT_WEB3 = new Web3(new Web3.providers.HttpProvider(nodeUri)); // default web3\r\n\r\ninterface UserProviderState {\r\n\tisLogged: boolean;\r\n\tisBurner: boolean;\r\n\tisWeb3Capable: boolean;\r\n\tisLoading: boolean;\r\n\taccount: string;\r\n\tbalance: {\r\n\t\teth: number;\r\n\t\tocn: number;\r\n\t};\r\n\tnetwork: string;\r\n\tweb3: Web3;\r\n\tocean: Ocean;\r\n\trequestFromFaucet(account: string): Promise<FaucetResponse>;\r\n\tloginMetamask(): Promise<any>;\r\n\tloginBurnerWallet(): Promise<any>;\r\n\tlogoutBurnerWallet(): Promise<any>;\r\n\tmessage: string;\r\n}\r\n\r\nexport default class UserProvider extends PureComponent<{}, UserProviderState> {\r\n\tprivate loginMetamask = async () => {\r\n\t\tconst metamaskProvider = new MetamaskProvider();\r\n\t\tawait metamaskProvider.startLogin();\r\n\t\tconst web3 = metamaskProvider.getProvider();\r\n\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\tisLogged: true,\r\n\t\t\t\tisBurner: false,\r\n\t\t\t\tweb3\r\n\t\t\t},\r\n\t\t\t() => {\r\n\t\t\t\tthis.loadOcean();\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n\r\n\tprivate loginBurnerWallet = async () => {\r\n\t\tconst burnerwalletProvider = new BurnerWalletProvider();\r\n\t\tawait burnerwalletProvider.startLogin();\r\n\t\tconst web3 = burnerwalletProvider.getProvider();\r\n\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\tisLogged: true,\r\n\t\t\t\tisBurner: true,\r\n\t\t\t\tweb3\r\n\t\t\t},\r\n\t\t\t() => {\r\n\t\t\t\tthis.loadOcean();\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n\r\n\tprivate logoutBurnerWallet = async () => {\r\n\t\tconst burnerwalletProvider = new BurnerWalletProvider();\r\n\t\tawait burnerwalletProvider.logout();\r\n\t};\r\n\r\n\tpublic state = {\r\n\t\tisLogged: false,\r\n\t\tisBurner: false,\r\n\t\tisWeb3Capable: Boolean(window.web3 || window.ethereum),\r\n\t\tisLoading: true,\r\n\t\tbalance: {\r\n\t\t\teth: 0,\r\n\t\t\tocn: 0\r\n\t\t},\r\n\t\tnetwork: '',\r\n\t\tweb3: DEFAULT_WEB3,\r\n\t\taccount: '',\r\n\t\tocean: {} as any,\r\n\t\trequestFromFaucet: () => requestFromFaucet(''),\r\n\t\tloginMetamask: () => this.loginMetamask(),\r\n\t\tloginBurnerWallet: () => this.loginBurnerWallet(),\r\n\t\tlogoutBurnerWallet: () => this.logoutBurnerWallet(),\r\n\t\tmessage: '' // 'Connecting to Ocean...'\r\n\t};\r\n\r\n\tprivate accountsInterval: any = null;\r\n\r\n\tprivate networkInterval: any = null;\r\n\r\n\tpublic async componentDidMount() {\r\n\t\tawait this.bootstrap();\r\n\t}\r\n\r\n\tprivate initAccountsPoll() {\r\n\t\tif (!this.accountsInterval) {\r\n\t\t\tthis.accountsInterval = setInterval(this.fetchAccounts, POLL_ACCOUNTS);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate initNetworkPoll() {\r\n\t\tif (!this.networkInterval) {\r\n\t\t\tthis.networkInterval = setInterval(this.fetchNetwork, POLL_NETWORK);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate loadDefaultWeb3 = async () => {\r\n\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\tisLogged: false,\r\n\t\t\t\tisBurner: false,\r\n\t\t\t\tweb3: DEFAULT_WEB3\r\n\t\t\t},\r\n\t\t\t() => {\r\n\t\t\t\tthis.loadOcean();\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n\r\n\tprivate loadOcean = async () => {\r\n\t\tconst { ocean } = await provideOcean(this.state.web3);\r\n\t\tthis.setState({ ocean, isLoading: false }, () => {\r\n\t\t\tthis.initNetworkPoll();\r\n\t\t\tthis.initAccountsPoll();\r\n\t\t\tthis.fetchNetwork();\r\n\t\t\tthis.fetchAccounts();\r\n\t\t});\r\n\t};\r\n\r\n\tprivate bootstrap = async () => {\r\n\t\tconst logType = localStorage.getItem('logType');\r\n\t\tconst metamaskProvider = new MetamaskProvider();\r\n\r\n\t\tswitch (logType) {\r\n\t\t\tcase 'Metamask':\r\n\t\t\t\tif ((await metamaskProvider.isAvailable()) && (await metamaskProvider.isLogged())) {\r\n\t\t\t\t\tconst web3 = metamaskProvider.getProvider();\r\n\t\t\t\t\tthis.setState(\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tisLogged: true,\r\n\t\t\t\t\t\t\tweb3\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t() => {\r\n\t\t\t\t\t\t\tthis.loadOcean();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.loadDefaultWeb3();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'BurnerWallet':\r\n\t\t\t\tthis.loginBurnerWallet();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthis.loginBurnerWallet();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\r\n\tprivate fetchAccounts = async () => {\r\n\t\tconst { ocean, isLogged } = this.state;\r\n\r\n\t\tif (isLogged) {\r\n\t\t\tlet accounts;\r\n\r\n\t\t\t// Modern dapp browsers\r\n\t\t\tif (window.ethereum && !isLogged) {\r\n\t\t\t\t// simply set to empty, and have user click a button somewhere\r\n\t\t\t\t// to initiate account unlocking\r\n\t\t\t\taccounts = [];\r\n\r\n\t\t\t\t// alternatively, automatically prompt for account unlocking\r\n\t\t\t\t// await this.unlockAccounts()\r\n\t\t\t}\r\n\r\n\t\t\taccounts = await ocean.accounts.list();\r\n\r\n\t\t\tif (accounts.length > 0) {\r\n\t\t\t\tconst account = await accounts[0].getId();\r\n\r\n\t\t\t\tif (account !== this.state.account) {\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\taccount,\r\n\t\t\t\t\t\tisLogged: true,\r\n\t\t\t\t\t\trequestFromFaucet: () => requestFromFaucet(account)\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tawait this.fetchBalance(accounts[0]);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t!isLogged && this.setState({ isLogged: false, account: '' });\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tprivate fetchBalance = async (account: Account) => {\r\n\t\tconst balance = await account.getBalance();\r\n\t\tconst { eth, ocn } = balance;\r\n\t\tif (eth !== this.state.balance.eth || ocn !== this.state.balance.ocn) {\r\n\t\t\tthis.setState({ balance: { eth, ocn } });\r\n\t\t}\r\n\t};\r\n\r\n\tprivate fetchNetwork = async () => {\r\n\t\tconst { ocean } = this.state;\r\n\t\tlet network = 'Unknown';\r\n\t\tif (ocean.keeper) {\r\n\t\t\tnetwork = await ocean.keeper.getNetworkName();\r\n\t\t}\r\n\t\tnetwork !== this.state.network && this.setState({ network });\r\n\t};\r\n\r\n\tpublic render() {\r\n\t\treturn (\r\n\t\t\t<User.Provider value={this.state}>\r\n\t\t\t\t<MarketProvider ocean={this.state.ocean}>{this.props.children}</MarketProvider>\r\n\t\t\t</User.Provider>\r\n\t\t);\r\n\t}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}