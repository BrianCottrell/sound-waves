{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\n/* eslint-disable no-console */\nimport { useEffect, useState } from 'react';\nimport ipfsClient from 'ipfs-http-client';\nvar ipfs = null;\nvar ipfsMessage = '';\nvar ipfsVersion = '';\nexport default function useIpfsApi(config) {\n  var _useState = useState(Boolean(ipfs)),\n      _useState2 = _slicedToArray(_useState, 2),\n      isIpfsReady = _useState2[0],\n      setIpfsReady = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      ipfsError = _useState4[0],\n      setIpfsError = _useState4[1];\n\n  useEffect(function () {\n    function initIpfs() {\n      return _initIpfs.apply(this, arguments);\n    }\n\n    function _initIpfs() {\n      _initIpfs = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var version;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(ipfs !== null)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                ipfsMessage = 'Checking IPFS gateway...';\n                _context.prev = 3;\n                _context.next = 6;\n                return ipfsClient(config);\n\n              case 6:\n                ipfs = _context.sent;\n                _context.next = 9;\n                return ipfs.version();\n\n              case 9:\n                version = _context.sent;\n                ipfsVersion = version.version;\n                ipfsMessage = \"Connected to \".concat(config.host);\n                _context.next = 17;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](3);\n                setIpfsError(\"IPFS connection error: \".concat(_context.t0.message));\n\n              case 17:\n                _context.t1 = setIpfsReady;\n                _context.t2 = Boolean;\n                _context.next = 21;\n                return ipfs.id();\n\n              case 21:\n                _context.t3 = _context.sent;\n                _context.t4 = (0, _context.t2)(_context.t3);\n                (0, _context.t1)(_context.t4);\n\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 14]]);\n      }));\n      return _initIpfs.apply(this, arguments);\n    }\n\n    initIpfs();\n  }, [config]);\n  useEffect(function () {\n    return function cleanup() {\n      if (ipfs) {\n        setIpfsReady(false);\n        ipfs = null;\n        ipfsMessage = '';\n        ipfsVersion = '';\n        setIpfsError('');\n      }\n    };\n  }, []);\n  return {\n    ipfs: ipfs,\n    ipfsVersion: ipfsVersion,\n    isIpfsReady: isIpfsReady,\n    ipfsError: ipfsError,\n    ipfsMessage: ipfsMessage\n  };\n}","map":{"version":3,"sources":["C:/Users/Brian/Projects/SoundWaves/sound-waves/client/src/hooks/use-ipfs-api.tsx"],"names":["useEffect","useState","ipfsClient","ipfs","ipfsMessage","ipfsVersion","useIpfsApi","config","Boolean","isIpfsReady","setIpfsReady","ipfsError","setIpfsError","initIpfs","version","host","message","id","cleanup"],"mappings":";;;;AAAA;AAEA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AAEA,IAAIC,IAAS,GAAG,IAAhB;AACA,IAAIC,WAAW,GAAG,EAAlB;AACA,IAAIC,WAAW,GAAG,EAAlB;AAQA,eAAe,SAASC,UAAT,CAAoBC,MAApB,EAAwC;AAAA,kBACfN,QAAQ,CAACO,OAAO,CAACL,IAAD,CAAR,CADO;AAAA;AAAA,MAC5CM,WAD4C;AAAA,MAC/BC,YAD+B;;AAAA,mBAEjBT,QAAQ,CAAC,EAAD,CAFS;AAAA;AAAA,MAE5CU,SAF4C;AAAA,MAEjCC,YAFiC;;AAInDZ,EAAAA,SAAS,CAAC,YAAM;AAAA,aACGa,QADH;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,+BACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACQV,IAAI,KAAK,IADjB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGIC,gBAAAA,WAAW,GAAG,0BAAd;AAHJ;AAAA;AAAA,uBAOqBF,UAAU,CAACK,MAAD,CAP/B;;AAAA;AAOQJ,gBAAAA,IAPR;AAAA;AAAA,uBAQ8BA,IAAI,CAACW,OAAL,EAR9B;;AAAA;AAQcA,gBAAAA,OARd;AASQT,gBAAAA,WAAW,GAAGS,OAAO,CAACA,OAAtB;AACAV,gBAAAA,WAAW,0BAAmBG,MAAM,CAACQ,IAA1B,CAAX;AAVR;AAAA;;AAAA;AAAA;AAAA;AAYQH,gBAAAA,YAAY,kCAA2B,YAAMI,OAAjC,EAAZ;;AAZR;AAAA,8BAcIN,YAdJ;AAAA,8BAciBF,OAdjB;AAAA;AAAA,uBAc+BL,IAAI,CAACc,EAAL,EAd/B;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADY;AAAA;AAAA;;AAkBZJ,IAAAA,QAAQ;AACX,GAnBQ,EAmBN,CAACN,MAAD,CAnBM,CAAT;AAqBAP,EAAAA,SAAS,CAAC,YAAM;AACZ,WAAO,SAASkB,OAAT,GAAmB;AACtB,UAAIf,IAAJ,EAAU;AACNO,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAP,QAAAA,IAAI,GAAG,IAAP;AACAC,QAAAA,WAAW,GAAG,EAAd;AACAC,QAAAA,WAAW,GAAG,EAAd;AACAO,QAAAA,YAAY,CAAC,EAAD,CAAZ;AACH;AACJ,KARD;AASH,GAVQ,EAUN,EAVM,CAAT;AAYA,SAAO;AAAET,IAAAA,IAAI,EAAJA,IAAF;AAAQE,IAAAA,WAAW,EAAXA,WAAR;AAAqBI,IAAAA,WAAW,EAAXA,WAArB;AAAkCE,IAAAA,SAAS,EAATA,SAAlC;AAA6CP,IAAAA,WAAW,EAAXA;AAA7C,GAAP;AACH","sourcesContent":["/* eslint-disable no-console */\r\n\r\nimport { useEffect, useState } from 'react'\r\nimport ipfsClient from 'ipfs-http-client'\r\n\r\nlet ipfs: any = null\r\nlet ipfsMessage = ''\r\nlet ipfsVersion = ''\r\n\r\nexport interface IpfsConfig {\r\n    protocol: string\r\n    host: string\r\n    port: string\r\n}\r\n\r\nexport default function useIpfsApi(config: IpfsConfig) {\r\n    const [isIpfsReady, setIpfsReady] = useState(Boolean(ipfs))\r\n    const [ipfsError, setIpfsError] = useState('')\r\n\r\n    useEffect(() => {\r\n        async function initIpfs() {\r\n            if (ipfs !== null) return\r\n\r\n            ipfsMessage = 'Checking IPFS gateway...'\r\n\r\n            try {\r\n                // eslint-disable-next-line require-atomic-updates\r\n                ipfs = await ipfsClient(config)\r\n                const version = await ipfs.version()\r\n                ipfsVersion = version.version\r\n                ipfsMessage = `Connected to ${config.host}`\r\n            } catch (error) {\r\n                setIpfsError(`IPFS connection error: ${error.message}`)\r\n            }\r\n            setIpfsReady(Boolean(await ipfs.id()))\r\n        }\r\n\r\n        initIpfs()\r\n    }, [config])\r\n\r\n    useEffect(() => {\r\n        return function cleanup() {\r\n            if (ipfs) {\r\n                setIpfsReady(false)\r\n                ipfs = null\r\n                ipfsMessage = ''\r\n                ipfsVersion = ''\r\n                setIpfsError('')\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    return { ipfs, ipfsVersion, isIpfsReady, ipfsError, ipfsMessage }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}