{"ast":null,"code":"var cleanupContentType = function cleanupContentType(contentType) {\n  // strip away the 'application/' part\n  var contentTypeSplit = contentType.split('/')[1];\n  if (!contentTypeSplit) return contentType;\n  var contentTypeCleaned; // TODO: add all the possible archive & compression MIME types\n\n  switch (contentType) {\n    case 'application/x-lzma':\n    case 'application/x-xz':\n    case 'application/x-tar':\n    case 'application/x-gtar':\n    case 'application/x-bzip2':\n    case 'application/x-gzip':\n    case 'application/x-7z-compressed':\n    case 'application/x-rar-compressed':\n    case 'application/x-zip-compressed':\n    case 'application/x-apple-diskimage':\n      contentTypeCleaned = contentTypeSplit.replace('x-', '').replace('-compressed', '');\n      break;\n\n    default:\n      contentTypeCleaned = contentTypeSplit;\n      break;\n  } // Manual replacements\n\n\n  contentTypeCleaned = contentTypeCleaned.replace('vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'xlsx').replace('vnd.ms-excel', 'xls').replace('apple-diskimage', 'dmg').replace('octet-stream', 'Binary').replace('svg+xml', 'svg');\n  return contentTypeCleaned;\n};\n\nexport default cleanupContentType;","map":{"version":3,"sources":["C:/Users/Brian/Projects/SoundWaves/sound-waves/client/src/utils/cleanupContentType.ts"],"names":["cleanupContentType","contentType","contentTypeSplit","split","contentTypeCleaned","replace"],"mappings":"AAAA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,WAAD,EAAyB;AAChD;AACA,MAAMC,gBAAgB,GAAGD,WAAW,CAACE,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAAzB;AAEA,MAAI,CAACD,gBAAL,EAAuB,OAAOD,WAAP;AAEvB,MAAIG,kBAAJ,CANgD,CAQhD;;AACA,UAAQH,WAAR;AACI,SAAK,oBAAL;AACA,SAAK,kBAAL;AACA,SAAK,mBAAL;AACA,SAAK,oBAAL;AACA,SAAK,qBAAL;AACA,SAAK,oBAAL;AACA,SAAK,6BAAL;AACA,SAAK,8BAAL;AACA,SAAK,8BAAL;AACA,SAAK,+BAAL;AACIG,MAAAA,kBAAkB,GAAGF,gBAAgB,CAChCG,OADgB,CACR,IADQ,EACF,EADE,EAEhBA,OAFgB,CAER,aAFQ,EAEO,EAFP,CAArB;AAGA;;AACJ;AACID,MAAAA,kBAAkB,GAAGF,gBAArB;AACA;AAjBR,GATgD,CA6BhD;;;AACAE,EAAAA,kBAAkB,GAAGA,kBAAkB,CAClCC,OADgB,CAEb,uDAFa,EAGb,MAHa,EAKhBA,OALgB,CAKR,cALQ,EAKQ,KALR,EAMhBA,OANgB,CAMR,iBANQ,EAMW,KANX,EAOhBA,OAPgB,CAOR,cAPQ,EAOQ,QAPR,EAQhBA,OARgB,CAQR,SARQ,EAQG,KARH,CAArB;AAUA,SAAOD,kBAAP;AACH,CAzCD;;AA2CA,eAAeJ,kBAAf","sourcesContent":["const cleanupContentType = (contentType: string) => {\r\n    // strip away the 'application/' part\r\n    const contentTypeSplit = contentType.split('/')[1]\r\n\r\n    if (!contentTypeSplit) return contentType\r\n\r\n    let contentTypeCleaned\r\n\r\n    // TODO: add all the possible archive & compression MIME types\r\n    switch (contentType) {\r\n        case 'application/x-lzma':\r\n        case 'application/x-xz':\r\n        case 'application/x-tar':\r\n        case 'application/x-gtar':\r\n        case 'application/x-bzip2':\r\n        case 'application/x-gzip':\r\n        case 'application/x-7z-compressed':\r\n        case 'application/x-rar-compressed':\r\n        case 'application/x-zip-compressed':\r\n        case 'application/x-apple-diskimage':\r\n            contentTypeCleaned = contentTypeSplit\r\n                .replace('x-', '')\r\n                .replace('-compressed', '')\r\n            break\r\n        default:\r\n            contentTypeCleaned = contentTypeSplit\r\n            break\r\n    }\r\n\r\n    // Manual replacements\r\n    contentTypeCleaned = contentTypeCleaned\r\n        .replace(\r\n            'vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n            'xlsx'\r\n        )\r\n        .replace('vnd.ms-excel', 'xls')\r\n        .replace('apple-diskimage', 'dmg')\r\n        .replace('octet-stream', 'Binary')\r\n        .replace('svg+xml', 'svg')\r\n\r\n    return contentTypeCleaned\r\n}\r\n\r\nexport default cleanupContentType\r\n"]},"metadata":{},"sourceType":"module"}