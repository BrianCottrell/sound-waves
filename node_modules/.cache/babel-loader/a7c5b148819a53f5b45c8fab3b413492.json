{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ContractEvent_1 = require(\"./ContractEvent\");\n\nvar Instantiable_abstract_1 = require(\"../Instantiable.abstract\");\n\nvar EventHandler = function (_super) {\n  __extends(EventHandler, _super);\n\n  function EventHandler(config) {\n    var _this = _super.call(this) || this;\n\n    _this.events = new Set();\n    _this.interval = 200;\n    _this.polling = false;\n\n    _this.setInstanceConfig(config);\n\n    return _this;\n  }\n\n  Object.defineProperty(EventHandler.prototype, \"count\", {\n    get: function get() {\n      return this.events.size;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  EventHandler.prototype.subscribe = function (callback) {\n    var _this = this;\n\n    this.events.add(callback);\n    this.checkBlock();\n    return {\n      unsubscribe: function unsubscribe() {\n        return _this.unsubscribe(callback);\n      }\n    };\n  };\n\n  EventHandler.prototype.unsubscribe = function (callback) {\n    this.events.delete(callback);\n\n    if (!this.count) {\n      clearTimeout(this.lastTimeout);\n      delete this.lastBlock;\n      this.polling = false;\n    }\n  };\n\n  EventHandler.prototype.getEvent = function (contract, eventName, filter) {\n    return new ContractEvent_1.ContractEvent(this, contract, eventName, filter);\n  };\n\n  EventHandler.prototype.checkBlock = function (isInterval, n) {\n    if (n === void 0) {\n      n = 0;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var blockNumber;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4, this.web3.eth.getBlockNumber()];\n\n          case 1:\n            blockNumber = _a.sent();\n\n            if (this.polling && !isInterval || !this.count) {\n              return [2];\n            }\n\n            this.polling = true;\n\n            if (!this.lastBlock) {\n              this.lastBlock = blockNumber;\n            }\n\n            if (this.lastBlock !== blockNumber) {\n              this.events.forEach(function (fn) {\n                return fn(_this.lastBlock + 1);\n              });\n              this.lastBlock = blockNumber;\n            }\n\n            this.lastTimeout = global.setTimeout(function () {\n              return _this.checkBlock(true, n++);\n            }, this.interval);\n            return [2];\n        }\n      });\n    });\n  };\n\n  return EventHandler;\n}(Instantiable_abstract_1.Instantiable);\n\nexports.EventHandler = EventHandler;","map":null,"metadata":{},"sourceType":"script"}