{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Logger_1 = require(\"./Logger\");\n\nexports.zeroX = function (input) {\n  return zeroXTransformer(input, true);\n};\n\nexports.noZeroX = function (input) {\n  return zeroXTransformer(input, false);\n};\n\nfunction zeroXTransformer(input, zeroOutput) {\n  if (input === void 0) {\n    input = '';\n  }\n\n  var _a = inputMatch(input, /^(?:0x)*([a-f0-9]+)$/i, 'zeroXTransformer'),\n      valid = _a.valid,\n      output = _a.output;\n\n  return (zeroOutput && valid ? '0x' : '') + output;\n}\n\nexports.zeroXTransformer = zeroXTransformer;\n\nexports.didPrefixed = function (input) {\n  return didTransformer(input, true);\n};\n\nexports.noDidPrefixed = function (input) {\n  return didTransformer(input, false);\n};\n\nfunction didTransformer(input, prefixOutput) {\n  if (input === void 0) {\n    input = '';\n  }\n\n  var _a = inputMatch(input, /^(?:0x|did:op:)*([a-f0-9]{64})$/i, 'didTransformer'),\n      valid = _a.valid,\n      output = _a.output;\n\n  return (prefixOutput && valid ? 'did:op:' : '') + output;\n}\n\nexports.didTransformer = didTransformer;\n\nexports.didZeroX = function (input) {\n  return exports.zeroX(didTransformer(input, false));\n};\n\nfunction inputMatch(input, regexp, conversorName) {\n  if (typeof input !== 'string') {\n    Logger_1.LoggerInstance.debug('Not input string:');\n    Logger_1.LoggerInstance.debug(input);\n    throw new Error(\"[\" + conversorName + \"] Expected string, input type: \" + typeof input);\n  }\n\n  var match = input.match(regexp);\n\n  if (!match) {\n    Logger_1.LoggerInstance.warn(\"[\" + conversorName + \"] Input transformation failed.\");\n    return {\n      valid: false,\n      output: input\n    };\n  }\n\n  return {\n    valid: true,\n    output: match[1]\n  };\n}","map":null,"metadata":{},"sourceType":"script"}