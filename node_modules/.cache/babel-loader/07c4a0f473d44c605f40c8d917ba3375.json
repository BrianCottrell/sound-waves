{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar SubscribableObserver = function () {\n  function SubscribableObserver() {\n    this.completed = false;\n    this.subscriptions = new Set();\n  }\n\n  SubscribableObserver.prototype.subscribe = function (onNext, onComplete, onError) {\n    var _this = this;\n\n    if (this.completed) {\n      throw new Error('Observer completed.');\n    }\n\n    var subscription = {\n      onNext: onNext,\n      onComplete: onComplete,\n      onError: onError\n    };\n    this.subscriptions.add(subscription);\n    return {\n      unsubscribe: function unsubscribe() {\n        return _this.subscriptions.delete(subscription);\n      }\n    };\n  };\n\n  SubscribableObserver.prototype.next = function (next) {\n    this.emit('onNext', next);\n  };\n\n  SubscribableObserver.prototype.complete = function (resolve) {\n    this.emit('onComplete', resolve);\n    this.unsubscribe();\n  };\n\n  SubscribableObserver.prototype.error = function (error) {\n    this.emit('onError', error);\n    this.unsubscribe();\n  };\n\n  SubscribableObserver.prototype.emit = function (type, value) {\n    Array.from(this.subscriptions).map(function (subscription) {\n      return subscription[type];\n    }).filter(function (callback) {\n      return callback && typeof callback === 'function';\n    }).forEach(function (callback) {\n      return callback(value);\n    });\n  };\n\n  SubscribableObserver.prototype.unsubscribe = function () {\n    this.completed = true;\n    this.subscriptions.clear();\n  };\n\n  return SubscribableObserver;\n}();\n\nexports.SubscribableObserver = SubscribableObserver;","map":null,"metadata":{},"sourceType":"script"}