{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Brian\\\\Projects\\\\ResearchHub\\\\research-hub\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Brian\\\\Projects\\\\ResearchHub\\\\research-hub\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Brian\\\\Projects\\\\ResearchHub\\\\research-hub\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Brian\\\\Projects\\\\ResearchHub\\\\research-hub\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Brian\\\\Projects\\\\ResearchHub\\\\research-hub\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Brian\\\\Projects\\\\ResearchHub\\\\research-hub\\\\client\\\\src\\\\components\\\\atoms\\\\Account.tsx\";\nimport React, { PureComponent } from 'react';\nimport Dotdotdot from 'react-dotdotdot';\nimport { toDataUrl } from 'ethereum-blockies';\nimport styles from './Account.module.scss';\nimport WalletSelector from '../organisms/WalletSelector';\nimport content from '../../data/web3message.json';\nimport { ReactComponent as Caret } from \"@svgr/webpack?-svgo,+ref!../../img/caret.svg\";\nimport { User } from '../../context';\nimport Button from './Button';\n\nvar Account =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Account, _PureComponent);\n\n  function Account() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Account);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Account)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isAccountInfoOpen: false\n    };\n    return _this;\n  }\n\n  _createClass(Account, [{\n    key: \"toggleAccountInfo\",\n    value: function toggleAccountInfo(event) {\n      event.preventDefault();\n      this.setState({\n        isAccountInfoOpen: !this.state.isAccountInfoOpen\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$context = this.context,\n          account = _this$context.account,\n          isBurner = _this$context.isBurner,\n          loginMetamask = _this$context.loginMetamask,\n          isWeb3Capable = _this$context.isWeb3Capable;\n      var isAccountInfoOpen = this.state.isAccountInfoOpen;\n      var seedphrase = localStorage.getItem('seedphrase');\n      var blockies = account && toDataUrl(account);\n      return React.createElement(\"div\", {\n        className: styles.account,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, account ? React.createElement(React.Fragment, null, React.createElement(\"img\", {\n        className: styles.blockies,\n        src: blockies,\n        alt: \"Blockies\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }), React.createElement(Dotdotdot, {\n        className: styles.accountId,\n        clamp: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, account)) : React.createElement(React.Fragment, null, React.createElement(\"span\", {\n        className: styles.blockies,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }), React.createElement(\"em\", {\n        className: styles.noAccount,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"No account selected\"), React.createElement(Button, {\n        link: true,\n        className: styles.unlock,\n        onClick: function onClick() {\n          return loginMetamask();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"Unlock Account\")), React.createElement(\"div\", {\n        className: styles.accountType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, isBurner ? React.createElement(\"button\", {\n        className: styles.toggle,\n        onClick: function onClick(event) {\n          return _this2.toggleAccountInfo(event);\n        },\n        title: \"Show More Account Info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(Caret, {\n        className: isAccountInfoOpen ? styles.open : '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), ' ', \"Burner Wallet\") : 'MetaMask', isWeb3Capable && React.createElement(WalletSelector, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      })), isBurner && isAccountInfoOpen && React.createElement(\"div\", {\n        className: styles.seedphrase,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, seedphrase), React.createElement(\"p\", {\n        className: styles.seedphraseHelp,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, content.seedphrase)));\n    }\n  }]);\n\n  return Account;\n}(PureComponent);\n\nAccount.contextType = User;\nexport { Account as default };","map":{"version":3,"sources":["C:/Users/Brian/Projects/ResearchHub/research-hub/client/src/components/atoms/Account.tsx"],"names":["React","PureComponent","Dotdotdot","toDataUrl","styles","WalletSelector","content","User","Button","Account","state","isAccountInfoOpen","event","preventDefault","setState","context","account","isBurner","loginMetamask","isWeb3Capable","seedphrase","localStorage","getItem","blockies","accountId","noAccount","unlock","accountType","toggle","toggleAccountInfo","open","seedphraseHelp","contextType"],"mappings":"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","sourcesContent":["import React, { PureComponent, MouseEvent } from 'react'\r\nimport Dotdotdot from 'react-dotdotdot'\r\nimport { toDataUrl } from 'ethereum-blockies'\r\nimport styles from './Account.module.scss'\r\nimport WalletSelector from '../organisms/WalletSelector'\r\nimport content from '../../data/web3message.json'\r\nimport { ReactComponent as Caret } from '../../img/caret.svg'\r\nimport { User } from '../../context'\r\nimport Button from './Button'\r\n\r\nexport default class Account extends PureComponent<\r\n    {},\r\n    { isAccountInfoOpen: boolean }\r\n> {\r\n    public static contextType = User\r\n\r\n    public state = {\r\n        isAccountInfoOpen: false\r\n    }\r\n\r\n    private toggleAccountInfo(event: MouseEvent) {\r\n        event.preventDefault()\r\n        this.setState({ isAccountInfoOpen: !this.state.isAccountInfoOpen })\r\n    }\r\n\r\n    public render() {\r\n        const { account, isBurner, loginMetamask, isWeb3Capable } = this.context\r\n        const { isAccountInfoOpen } = this.state\r\n        const seedphrase = localStorage.getItem('seedphrase') as string\r\n        const blockies = account && toDataUrl(account)\r\n\r\n        return (\r\n            <div className={styles.account}>\r\n                {account ? (\r\n                    <>\r\n                        <img\r\n                            className={styles.blockies}\r\n                            src={blockies}\r\n                            alt=\"Blockies\"\r\n                        />\r\n                        <Dotdotdot className={styles.accountId} clamp={2}>\r\n                            {account}\r\n                        </Dotdotdot>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <span className={styles.blockies} />\r\n                        <em className={styles.noAccount}>\r\n                            No account selected\r\n                        </em>\r\n                        <Button\r\n                            link\r\n                            className={styles.unlock}\r\n                            onClick={() => loginMetamask()}\r\n                        >\r\n                            Unlock Account\r\n                        </Button>\r\n                    </>\r\n                )}\r\n\r\n                <div className={styles.accountType}>\r\n                    {isBurner ? (\r\n                        <button\r\n                            className={styles.toggle}\r\n                            onClick={event => this.toggleAccountInfo(event)}\r\n                            title=\"Show More Account Info\"\r\n                        >\r\n                            <Caret\r\n                                className={isAccountInfoOpen ? styles.open : ''}\r\n                            />{' '}\r\n                            Burner Wallet\r\n                        </button>\r\n                    ) : (\r\n                        'MetaMask'\r\n                    )}\r\n                    {isWeb3Capable && <WalletSelector />}\r\n                </div>\r\n\r\n                {isBurner && isAccountInfoOpen && (\r\n                    <div className={styles.seedphrase}>\r\n                        <code>{seedphrase}</code>\r\n                        <p className={styles.seedphraseHelp}>\r\n                            {content.seedphrase}\r\n                        </p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}