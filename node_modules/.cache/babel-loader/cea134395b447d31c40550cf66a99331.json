{"ast":null,"code":"'use strict';\n/* eslint-env browser */\n\nvar _defineProperty = require(\"C:\\\\Users\\\\Brian\\\\Projects\\\\ResearchHub\\\\research-hub\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar ky = require('ky-universal').default;\n\nvar _require = require('ipfs-utils/src/env'),\n    isBrowser = _require.isBrowser,\n    isWebWorker = _require.isWebWorker;\n\nvar _require2 = require('./multiaddr'),\n    toUri = _require2.toUri;\n\nvar errorHandler = require('./error-handler');\n\nvar mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n}); // Set default configuration and call create function with them\n\n\nmodule.exports = function (create) {\n  return function (config) {\n    config = config || {};\n\n    if (typeof config === 'string') {\n      config = {\n        apiAddr: config\n      };\n    } else if (config.constructor && config.constructor.isMultiaddr) {\n      config = {\n        apiAddr: config\n      };\n    } else {\n      config = _objectSpread({}, config);\n    }\n\n    config.apiAddr = (config.apiAddr || getDefaultApiAddr(config)).toString();\n    config.apiAddr = config.apiAddr.startsWith('/') ? toUri(config.apiAddr) : config.apiAddr;\n    config.apiPath = config.apiPath || config['api-path'] || '/api/v0'; // TODO configure ky to use config.fetch when this is released:\n    // https://github.com/sindresorhus/ky/pull/153\n\n    var defaults = {\n      prefixUrl: config.apiAddr + config.apiPath,\n      timeout: config.timeout || 60000 * 20,\n      headers: config.headers,\n      hooks: {\n        afterResponse: [errorHandler]\n      }\n    };\n    var k = ky.extend(defaults);\n    var client = ['get', 'post', 'put', 'delete', 'patch', 'head'].reduce(function (client, key) {\n      client[key] = wrap(k[key], defaults);\n      return client;\n    }, wrap(k, defaults));\n    return create(_objectSpread({\n      ky: client\n    }, config));\n  };\n};\n\nfunction getDefaultApiAddr(_ref) {\n  var protocol = _ref.protocol,\n      host = _ref.host,\n      port = _ref.port;\n\n  if (isBrowser || isWebWorker) {\n    if (!protocol && !host && !port) {\n      // Use current origin\n      return '';\n    }\n\n    if (!protocol) {\n      protocol = location.protocol.startsWith('http') ? location.protocol.split(':')[0] : 'http';\n    }\n\n    host = host || location.hostname;\n    port = port || location.port;\n    return \"\".concat(protocol, \"://\").concat(host).concat(port ? ':' + port : '');\n  }\n\n  return \"\".concat(protocol || 'http', \"://\").concat(host || 'localhost', \":\").concat(port || 5001);\n} // returns the passed function wrapped in a function that ignores\n// undefined values in the passed `options` object\n\n\nfunction wrap(fn, defaults) {\n  return function (input, options) {\n    return fn(input, mergeOptions(defaults, options));\n  };\n}","map":null,"metadata":{},"sourceType":"script"}