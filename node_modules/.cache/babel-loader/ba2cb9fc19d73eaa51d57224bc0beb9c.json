{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ContractHandler_1 = __importDefault(require(\"../ContractHandler\"));\n\nvar Instantiable_abstract_1 = require(\"../../Instantiable.abstract\");\n\nvar ContractBase = function (_super) {\n  __extends(ContractBase, _super);\n\n  function ContractBase(contractName, optional) {\n    if (optional === void 0) {\n      optional = false;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.optional = optional;\n    _this.contract = null;\n    _this.contractName = contractName;\n    return _this;\n  }\n\n  Object.defineProperty(ContractBase.prototype, \"address\", {\n    get: function get() {\n      return this.contract.options.address;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ContractBase.prototype.getEventData = function (eventName, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (!this.contract.events[eventName]) {\n          throw new Error(\"Event \\\"\" + eventName + \"\\\" not found on contract \\\"\" + this.contractName + \"\\\"\");\n        }\n\n        return [2, this.contract.getPastEvents(eventName, options)];\n      });\n    });\n  };\n\n  ContractBase.prototype.getPastEvents = function (eventName, filter) {\n    return this.getEventData(eventName, {\n      filter: filter,\n      fromBlock: 0,\n      toBlock: 'latest'\n    });\n  };\n\n  ContractBase.prototype.getAddress = function () {\n    return this.contract.options.address;\n  };\n\n  ContractBase.prototype.getSignatureOfMethod = function (methodName) {\n    var foundMethod = this.searchMethod(methodName);\n    return foundMethod.signature;\n  };\n\n  ContractBase.prototype.getInputsOfMethod = function (methodName) {\n    var foundMethod = this.searchMethod(methodName);\n    return foundMethod.inputs;\n  };\n\n  ContractBase.prototype.init = function (config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var contractHandler, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.setInstanceConfig(config);\n            contractHandler = new ContractHandler_1.default(config);\n            _a = this;\n            return [4, contractHandler.get(this.contractName, this.optional)];\n\n          case 1:\n            _a.contract = _b.sent();\n            return [2];\n        }\n      });\n    });\n  };\n\n  ContractBase.prototype.getFromAddress = function (from) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!from) return [3, 2];\n            return [4, this.web3.eth.getAccounts()];\n\n          case 1:\n            from = _a.sent()[0];\n            _a.label = 2;\n\n          case 2:\n            return [2, from];\n        }\n      });\n    });\n  };\n\n  ContractBase.prototype.sendFrom = function (name, args, from) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4, this.getFromAddress(from)];\n\n          case 1:\n            from = _a.sent();\n            return [2, this.send(name, from, args)];\n        }\n      });\n    });\n  };\n\n  ContractBase.prototype.send = function (name, from, args) {\n    return __awaiter(this, void 0, void 0, function () {\n      var method, methodInstance, estimatedGas, tx, err_1, mappedArgs;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.contract.methods[name]) {\n              throw new Error(\"Method \\\"\" + name + \"\\\" is not part of contract \\\"\" + this.contractName + \"\\\"\");\n            }\n\n            method = this.contract.methods[name];\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            methodInstance = method.apply(void 0, args);\n            return [4, methodInstance.estimateGas(args, {\n              from: from\n            })];\n\n          case 2:\n            estimatedGas = _a.sent();\n            tx = methodInstance.send({\n              from: from,\n              gas: estimatedGas\n            });\n            return [2, tx];\n\n          case 3:\n            err_1 = _a.sent();\n            mappedArgs = this.searchMethod(name, args).inputs.map(function (input, i) {\n              return {\n                name: input.name,\n                value: args[i]\n              };\n            });\n            this.logger.error('-'.repeat(40));\n            this.logger.error(\"Sending transaction \\\"\" + name + \"\\\" on contract \\\"\" + this.contractName + \"\\\" failed.\");\n            this.logger.error(\"Error: \" + err_1.message);\n            this.logger.error(\"From: \" + from);\n            this.logger.error(\"Parameters: \" + JSON.stringify(mappedArgs, null, 2));\n            this.logger.error('-'.repeat(40));\n            throw err_1;\n\n          case 4:\n            return [2];\n        }\n      });\n    });\n  };\n\n  ContractBase.prototype.call = function (name, args, from) {\n    return __awaiter(this, void 0, void 0, function () {\n      var method;\n\n      var _a;\n\n      return __generator(this, function (_b) {\n        if (!this.contract.methods[name]) {\n          throw new Error(\"Method \" + name + \" is not part of contract \" + this.contractName);\n        }\n\n        try {\n          method = (_a = this.contract.methods)[name].apply(_a, args);\n          return [2, method.call(from ? {\n            from: from\n          } : null)];\n        } catch (err) {\n          this.logger.error(\"Calling method \\\"\" + name + \"\\\" on contract \\\"\" + this.contractName + \"\\\" failed. Args: \" + args, err);\n          throw err;\n        }\n\n        return [2];\n      });\n    });\n  };\n\n  ContractBase.prototype.getEvent = function (eventName, filter) {\n    if (!this.contract.events[eventName]) {\n      throw new Error(\"Event \" + eventName + \" is not part of contract \" + this.contractName);\n    }\n\n    return this.ocean.keeper.utils.eventHandler.getEvent(this, eventName, filter);\n  };\n\n  ContractBase.prototype.searchMethod = function (methodName, args) {\n    if (args === void 0) {\n      args = [];\n    }\n\n    var methods = this.contract.options.jsonInterface.map(function (method) {\n      return __assign(__assign({}, method), {\n        signature: method.signature\n      });\n    }).filter(function (method) {\n      return method.name === methodName;\n    });\n    var foundMethod = methods.find(function (_a) {\n      var inputs = _a.inputs;\n      return inputs.length === args.length;\n    }) || methods[0];\n\n    if (!foundMethod) {\n      throw new Error(\"Method \\\"\" + methodName + \"\\\" is not part of contract \\\"\" + this.contractName + \"\\\"\");\n    }\n\n    return foundMethod;\n  };\n\n  ContractBase.instance = null;\n  return ContractBase;\n}(Instantiable_abstract_1.Instantiable);\n\nexports.ContractBase = ContractBase;\nexports.default = ContractBase;","map":null,"metadata":{},"sourceType":"script"}