{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Brian\\\\Projects\\\\SoundWaves\\\\sound-waves\\\\client\\\\src\\\\components\\\\atoms\\\\Form\\\\Input.tsx\";\nimport cx from 'classnames';\nimport React, { PureComponent } from 'react';\nimport slugify from '@sindresorhus/slugify';\nimport DatePicker from 'react-datepicker';\nimport { ReactComponent as SearchIcon } from \"@svgr/webpack?-svgo,+ref!../../../img/search.svg\";\nimport Help from './Help';\nimport Label from './Label';\nimport Row from './Row';\nimport InputGroup from './InputGroup';\nimport styles from './Input.module.scss';\n\nvar Input =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(Input, _PureComponent);\n\n  function Input() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Input);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Input)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isFocused: false,\n      dateCreated: new Date()\n    };\n\n    _this.toggleFocus = function () {\n      _this.setState({\n        isFocused: !_this.state.isFocused\n      });\n    };\n\n    _this.handleDateChange = function (date) {\n      _this.setState({\n        dateCreated: date\n      });\n\n      var event = {\n        currentTarget: {\n          name: 'dateCreated',\n          value: date\n        }\n      };\n\n      _this.props.onChange(event); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n\n    };\n\n    _this.InputComponent = function () {\n      var _this$props = _this.props,\n          type = _this$props.type,\n          options = _this$props.options,\n          group = _this$props.group,\n          name = _this$props.name,\n          required = _this$props.required,\n          onChange = _this$props.onChange,\n          value = _this$props.value;\n\n      var wrapClass = _this.inputWrapClasses();\n\n      switch (type) {\n        case 'select':\n          return React.createElement(\"div\", {\n            className: wrapClass,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91\n            },\n            __self: this\n          }, React.createElement(\"select\", {\n            id: name,\n            className: styles.select,\n            name: name,\n            required: required,\n            onFocus: _this.toggleFocus,\n            onBlur: _this.toggleFocus,\n            onChange: onChange,\n            value: value,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92\n            },\n            __self: this\n          }, React.createElement(\"option\", {\n            value: \"\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 102\n            },\n            __self: this\n          }, \"---\"), options && options.sort(function (a, b) {\n            return a.localeCompare(b);\n          }).map(function (option, index) {\n            return React.createElement(\"option\", {\n              key: index,\n              value: option,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 107\n              },\n              __self: this\n            }, option);\n          })));\n\n        case 'textarea':\n          return React.createElement(\"div\", {\n            className: wrapClass,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116\n            },\n            __self: this\n          }, React.createElement(\"textarea\", Object.assign({\n            id: name,\n            className: styles.input,\n            onFocus: _this.toggleFocus,\n            onBlur: _this.toggleFocus\n          }, _this.props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117\n            },\n            __self: this\n          })));\n\n        case 'radio':\n        case 'checkbox':\n          return React.createElement(\"div\", {\n            className: styles.radioGroup,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 129\n            },\n            __self: this\n          }, options && options.map(function (option, index) {\n            return React.createElement(\"div\", {\n              className: styles.radioWrap,\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 132\n              },\n              __self: this\n            }, React.createElement(\"input\", {\n              className: styles.radio,\n              id: slugify(option),\n              type: type,\n              name: name,\n              value: slugify(option),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 133\n              },\n              __self: this\n            }), React.createElement(\"label\", {\n              className: styles.radioLabel,\n              htmlFor: slugify(option),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 140\n              },\n              __self: this\n            }, option));\n          }));\n\n        case 'date':\n          return React.createElement(\"div\", {\n            className: wrapClass,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 152\n            },\n            __self: this\n          }, React.createElement(DatePicker, {\n            selected: _this.state.dateCreated,\n            onChange: _this.handleDateChange,\n            className: styles.input,\n            onFocus: _this.toggleFocus,\n            onBlur: _this.toggleFocus,\n            id: name,\n            name: name,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 153\n            },\n            __self: this\n          }));\n\n        default:\n          return React.createElement(\"div\", {\n            className: wrapClass,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 166\n            },\n            __self: this\n          }, group ? React.createElement(InputGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 168\n            },\n            __self: this\n          }, React.createElement(\"input\", Object.assign({\n            id: name,\n            type: type || 'text',\n            className: styles.input,\n            onFocus: _this.toggleFocus,\n            onBlur: _this.toggleFocus\n          }, _this.props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 169\n            },\n            __self: this\n          })), group) : React.createElement(\"input\", Object.assign({\n            id: name,\n            type: type || 'text',\n            className: styles.input,\n            onFocus: _this.toggleFocus,\n            onBlur: _this.toggleFocus\n          }, _this.props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 180\n            },\n            __self: this\n          })), type === 'search' && React.createElement(SearchIcon, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 190\n            },\n            __self: this\n          }));\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Input, [{\n    key: \"inputWrapClasses\",\n    value: function inputWrapClasses() {\n      if (this.props.type === 'search') {\n        return styles.inputWrapSearch;\n      } else if (this.props.type === 'search' && this.state.isFocused) {\n        return cx(styles.inputWrapSearch, styles.isFocused);\n      } else if (this.state.isFocused && this.props.type !== 'search') {\n        return cx(styles.inputWrap, styles.isFocused);\n      } else {\n        return styles.inputWrap;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          name = _this$props2.name,\n          label = _this$props2.label,\n          required = _this$props2.required,\n          help = _this$props2.help,\n          additionalComponent = _this$props2.additionalComponent,\n          multiple = _this$props2.multiple;\n      return React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(Label, {\n        htmlFor: name,\n        required: required,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, label), React.createElement(this.InputComponent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }), help && React.createElement(Help, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, help), multiple && 'hello', additionalComponent && additionalComponent);\n    }\n  }]);\n\n  return Input;\n}(PureComponent);\n\nexport { Input as default };","map":{"version":3,"sources":["C:/Users/Brian/Projects/SoundWaves/sound-waves/client/src/components/atoms/Form/Input.tsx"],"names":["cx","React","PureComponent","slugify","DatePicker","Help","Label","Row","InputGroup","styles","Input","state","isFocused","dateCreated","Date","toggleFocus","setState","handleDateChange","date","event","currentTarget","name","value","props","onChange","InputComponent","type","options","group","required","wrapClass","inputWrapClasses","select","sort","a","b","localeCompare","map","option","index","input","radioGroup","radioWrap","radio","radioLabel","inputWrapSearch","inputWrap","label","help","additionalComponent","multiple"],"mappings":"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","sourcesContent":["import cx from 'classnames'\r\nimport React, { PureComponent, FormEvent, ChangeEvent } from 'react'\r\nimport slugify from '@sindresorhus/slugify'\r\nimport DatePicker from 'react-datepicker'\r\nimport { ReactComponent as SearchIcon } from '../../../img/search.svg'\r\nimport Help from './Help'\r\nimport Label from './Label'\r\nimport Row from './Row'\r\nimport InputGroup from './InputGroup'\r\nimport styles from './Input.module.scss'\r\n\r\ninterface InputProps {\r\n    name: string\r\n    label: string\r\n    placeholder?: string\r\n    required?: boolean\r\n    help?: string\r\n    tag?: string\r\n    type?: string\r\n    options?: string[]\r\n    additionalComponent?: any\r\n    value?: string\r\n    onChange?(\r\n        event:\r\n            | FormEvent<HTMLInputElement>\r\n            | ChangeEvent<HTMLInputElement>\r\n            | ChangeEvent<HTMLSelectElement>\r\n            | ChangeEvent<HTMLTextAreaElement>\r\n    ): void\r\n    rows?: number\r\n    group?: any\r\n    multiple?: boolean\r\n    pattern?: string\r\n}\r\n\r\ninterface InputState {\r\n    isFocused: boolean\r\n    dateCreated?: Date\r\n}\r\n\r\nexport default class Input extends PureComponent<InputProps, InputState> {\r\n    public state: InputState = {\r\n        isFocused: false,\r\n        dateCreated: new Date()\r\n    }\r\n\r\n    public inputWrapClasses() {\r\n        if (this.props.type === 'search') {\r\n            return styles.inputWrapSearch\r\n        } else if (this.props.type === 'search' && this.state.isFocused) {\r\n            return cx(styles.inputWrapSearch, styles.isFocused)\r\n        } else if (this.state.isFocused && this.props.type !== 'search') {\r\n            return cx(styles.inputWrap, styles.isFocused)\r\n        } else {\r\n            return styles.inputWrap\r\n        }\r\n    }\r\n\r\n    public toggleFocus = () => {\r\n        this.setState({ isFocused: !this.state.isFocused })\r\n    }\r\n\r\n    private handleDateChange = (date: Date) => {\r\n        this.setState({ dateCreated: date })\r\n\r\n        const event = {\r\n            currentTarget: {\r\n                name: 'dateCreated',\r\n                value: date\r\n            }\r\n        }\r\n        this.props.onChange!(event as any) // eslint-disable-line @typescript-eslint/no-non-null-assertion\r\n    }\r\n\r\n    public InputComponent = () => {\r\n        const {\r\n            type,\r\n            options,\r\n            group,\r\n            name,\r\n            required,\r\n            onChange,\r\n            value\r\n        } = this.props\r\n\r\n        const wrapClass = this.inputWrapClasses()\r\n\r\n        switch (type) {\r\n            case 'select':\r\n                return (\r\n                    <div className={wrapClass}>\r\n                        <select\r\n                            id={name}\r\n                            className={styles.select}\r\n                            name={name}\r\n                            required={required}\r\n                            onFocus={this.toggleFocus}\r\n                            onBlur={this.toggleFocus}\r\n                            onChange={onChange}\r\n                            value={value}\r\n                        >\r\n                            <option value=\"\">---</option>\r\n                            {options &&\r\n                                options\r\n                                    .sort((a, b) => a.localeCompare(b))\r\n                                    .map((option: string, index: number) => (\r\n                                        <option key={index} value={option}>\r\n                                            {option}\r\n                                        </option>\r\n                                    ))}\r\n                        </select>\r\n                    </div>\r\n                )\r\n            case 'textarea':\r\n                return (\r\n                    <div className={wrapClass}>\r\n                        <textarea\r\n                            id={name}\r\n                            className={styles.input}\r\n                            onFocus={this.toggleFocus}\r\n                            onBlur={this.toggleFocus}\r\n                            {...this.props}\r\n                        />\r\n                    </div>\r\n                )\r\n            case 'radio':\r\n            case 'checkbox':\r\n                return (\r\n                    <div className={styles.radioGroup}>\r\n                        {options &&\r\n                            options.map((option: string, index: number) => (\r\n                                <div className={styles.radioWrap} key={index}>\r\n                                    <input\r\n                                        className={styles.radio}\r\n                                        id={slugify(option)}\r\n                                        type={type}\r\n                                        name={name}\r\n                                        value={slugify(option)}\r\n                                    />\r\n                                    <label\r\n                                        className={styles.radioLabel}\r\n                                        htmlFor={slugify(option)}\r\n                                    >\r\n                                        {option}\r\n                                    </label>\r\n                                </div>\r\n                            ))}\r\n                    </div>\r\n                )\r\n            case 'date':\r\n                return (\r\n                    <div className={wrapClass}>\r\n                        <DatePicker\r\n                            selected={this.state.dateCreated}\r\n                            onChange={this.handleDateChange}\r\n                            className={styles.input}\r\n                            onFocus={this.toggleFocus}\r\n                            onBlur={this.toggleFocus}\r\n                            id={name}\r\n                            name={name}\r\n                        />\r\n                    </div>\r\n                )\r\n            default:\r\n                return (\r\n                    <div className={wrapClass}>\r\n                        {group ? (\r\n                            <InputGroup>\r\n                                <input\r\n                                    id={name}\r\n                                    type={type || 'text'}\r\n                                    className={styles.input}\r\n                                    onFocus={this.toggleFocus}\r\n                                    onBlur={this.toggleFocus}\r\n                                    {...this.props}\r\n                                />\r\n                                {group}\r\n                            </InputGroup>\r\n                        ) : (\r\n                            <input\r\n                                id={name}\r\n                                type={type || 'text'}\r\n                                className={styles.input}\r\n                                onFocus={this.toggleFocus}\r\n                                onBlur={this.toggleFocus}\r\n                                {...this.props}\r\n                            />\r\n                        )}\r\n\r\n                        {type === 'search' && <SearchIcon />}\r\n                    </div>\r\n                )\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        const {\r\n            name,\r\n            label,\r\n            required,\r\n            help,\r\n            additionalComponent,\r\n            multiple\r\n        } = this.props\r\n\r\n        return (\r\n            <Row>\r\n                <Label htmlFor={name} required={required}>\r\n                    {label}\r\n                </Label>\r\n\r\n                <this.InputComponent />\r\n\r\n                {help && <Help>{help}</Help>}\r\n\r\n                {multiple && 'hello'}\r\n\r\n                {additionalComponent && additionalComponent}\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}